
require 'httparty'
require 'json'

# Replace 'your_api_key_here' with your actual Google API key



# Endpoint for the Gemini API
# url = "https://generativelanguage.googleapis.com/v1/models/gemini-pro:generateContent?key=AIzaSyCuZDCq2Z2SSDAT3mb5uNYJiaaWarTn1Es" 

url = "https://generativelanguage.googleapis.com/v1/models/gemini-pro-vision:generateContent?key=#{api_key}"

# The request body (prompt)
  contents: [
        { text: "summarize ai: Accurately and clearly summarize the content while maintaining the main points. Focus on the central ideas and essential information. Avoid unnecessary details and use smooth and easy-to-understand language:summarize ai flash card: Convert the content into easy and enjoyable flashcards for children. Use simple and clear language. Divide the information into main points that are easy to remember. Add simplified illustrative examples if possible:concept map: Create a concept map for the main concepts in the following content. Identify the main and sub-ideas and connect them logically. Provide the description in text form that can be converted into a concept map using diagramming tools:concept tree: Create a concept tree to illustrate the main ideas in the following content. Identify the main concepts and their branches in an organized and clear manner. Provide the description in text form that can be converted into a concept tree:story: Transform the following content into an inspiring and engaging story. Choose the most vibrant and impactful language. Focus on the creative and inspiring elements in the content. Use a narrative style that captivates the reader:hello everyone today I wanted to talk about a resource that I stumbled across the other day which I think is really helpful and you'll probably like uh using it as well so from Andrew Kane I'll have a link to this in the video description I highly recommend you come here and check this out because there's so many links in here I'm not going to click on them all but it's a production checklist if you want or like a list of best practices for running your rails apps in production and I've covered some of the stuff in here before some of it I'm just going to gloss over because it's it's just like reading material for you like if you go over to the security best practices section you just scroll through here see all the stuff about secrets and SQL injections and make sure you're not doing any of it but some of it's uh you know links to important gems you might want to use or services like the roll bar service where some of it's going to be free some of it's going to have like a paid tier that you have to sign up for personally I think you're probably good in a lot of cases with putting off the paid Services until you're at least making some money off of your application but it's ultimately up to you I'm not going to tell you how to live your life uh and some of the things like logging I do think are important uh I don't think you need like a whole logging framework but I do think it's useful to at the very least reduce the amount of logs that are being spit out to it because if you come into like your own devlog for example in one of your applications there's just so much stuff in here that really doesn't matter and some of it is just poorly formatted Etc so I definitely think it's it's not a bad idea to customize your logs and to actually use them like actually go open up your logs directory if you haven't done that before because for some reason people just kind of ignore it on your log and then development or production log and actually read what's happening in your application if you're running into an issue uh they also mentioned like auditing libraries which we've done something similar I don't think we used audited necessarily but we've done stuff before with like uh auditing your like security audits or uh like your formatters and stuff like that to make sure that you're running through your code and making sure it's it's up to Snuff um we have the we have the CDN uh web request stuff uh your prior to using Puma uh you have a deflator if you want to for compression if you're not familiar basically allows you to shrink your page size um you also have the CDN section now if you're not using cdns and you comment on my videos saying like I can't believe this this cringe Lord's using a CDN instead of adding bootstrap into his application blah blah blah sometimes it's just easier to do that in most cases I'm doing that because I'm lazy but it's it's always fun to start that fight but cdns in some cases can be very useful just because it allows you to host this in a way that doesn't interfere with your actual app and it allows the the traffic to sort of be distributed it also in terms of distribution allows you to have a CDN that's probably closer to your customer than your server might be like if I'm only running a server in New York my customer is coming from Europe and I have a CDN that's over in Europe when they visit the website might be a little bit easier to serve it that way so that's also something to consider for background jobs we've covered sidekick before and for emails and stuff like that I'm just going to leave these links here uh sendgrid is personally what I use it's just a neat little email service so this is what I use for uh like dnn.com and couple other things the reason why I like them is because in their pricing they have a free tier which is for like 100 emails a day I think uh yeah 100 emails a day so that's definitely worth taking a look at it's useful in all types of applications um in terms of caching and performance again I'll just leave these links here because I don't want to take away too much from the guide I just want to sort of point you to it because it's been pretty interesting to read through for monitoring I've definitely heard a lot about New Relic and app signal but I haven't personally used either if you come into like pricing for New New Relic I think there's a free tier or a standard tier which starts at zero dollars a month so yeah that's definitely something to take a look at you have your uptime monitoring which if you're just running your own application initially you could probably just uh refresh it every once in a while to make sure it's up and running like let me just go ahead and do my own uptime monitor yep the website that gets about 80 visitors a month seems to be doing okay so we'll just close that again don't take it to don't take this list too seriously if you're just starting out this is like what did he say it's like based on experience from like instacart which if you're not familiar they get a little bit more than 80 visitors a month um so definitely worth you know taking that in in the consideration this is a great list for you to learn from but as with all things there's going to be Nuance depending on your situation don't think you have to go out and spend you know 20 bucks on each of these services to make sure that you have like a real official application you can definitely get away with without needing some of these things right uh in terms of the database stuff we have covered PG hero I think I just covered that like yesterday this just allows you to check like uh the status of your database make sure all your queries are working make sure you're not using too much space Etc down here you got the notable events which just lets you track failures in your in your web app you also have the timeout section which is really cool if you're not familiar you don't want your um you don't want your like postgres database to just sit there and spin out of control so sometimes what you'll do we come down here you'll just add a timeout that tells it like how long it's good to spend before it needs to uh to you know go back to working so if you do it manage to do something really bad this will hopefully save you or if the database you know isn't working for some reason you it'll just resolve itself in terms of analytics we've covered this before we've covered the Ahoy gem a lot I'm not even going to talk about the other two although there are other options like amplitude mix panel uh we're just going to take a look at Ahoy this is just like a Google analytics alternative where you can sort of control what data gets collected uh and you know this is really useful just because it's a it's a way for you to collect let's say the the number of visits on each of your pages uh without Google also getting access to that person's IP address their entire shopping history and what they had for lunch that day and this is also really useful for doing stuff like I think I've done it before but if I go over to YouTube and I search for Let's see we can go to uh we can go to Ruby on Rails real time graph maybe a real-time chart uh real-time analytics so what I did here was I combined chart kick with the Ahoy Gem and turbo to I have a chart that updates in real time if I can just go ahead and open this and mute it and we come over here basically what happens is as you visit some pages you'll see the the history update in real time in this graph so you get your real-time analytics and it's pretty easy to set up with just like chart kick and Ahoy and of course turbo but yeah this is definitely a very powerful tool that I recommend you taking a look at there's a whole bunch of stuff you can track if you want to the only thing I would say is every time you go to track a new piece of data update your terms of service and your privacy policy to make sure that your users are aware of what you're doing and what you're using because it's not nice to track people's data and in a lot of cases it's not entirely legal to track people's data without their permissions so make sure you're doing that that's why with you like Google analytics they have like a whole privacy policy acknowledging they're using Google analytics because at this point it's so far gone in terms of what they collect that they can't really outline at all so you like link their privacy policy and your privacy policy and it's a whole mess so that's where I definitely think Ahoy is easier to work with and probably better for your end users but this isn't really a video about Ahoy it's just something I wanted to talk about for a bit because it's probably the thing I'm most familiar with in terms of feature Flags we've also covered the other day we covered The Flipper Gem and rails which is a way for you too if we come in here and we hopefully have it muted it's a way for you to sort of toggle features on and off even for a couple different users if I can find the place uh so what we have right here you can basically set a flag where you can have like 33 of your users um not have been the navbar or 33 of the users won't have access to the new feature so if we look at this like right here you can see 66 percent of actors have access to the navbar which means two and three people uh randomly will have access to it and one third won't which is where sometimes you get those like let's say this like weird background that YouTube's doing now where they have like the the video bleed out into the the page uh you don't roll that out to all users initially you roll it out to some see what their reactions are and then over time if if it's working there's no bugs or anything you can then uh roll it out to more users alternatively if they all hate it you can also just refuse to roll it out Etc so that's for something like uh flipper works and that's basically what rollout does uh the reason why I went with flipper 4 is just because rollout hasn't been updated in like a year or two that's why when like The Flipper Cloud solution but again they have a uh they have like a free tier you can use and they also have a self-hosted version for their back and dashboard that you can use so that's definitely worth taking a look at unless you want to use rollout I'm not going to stop you uh it's just my personal experience speaking there and finally there is a call for suggestions so if there's anything else you think should be added to this I'll have a link to this entire GitHub repo from Andrew in the video description and then you can come in here and make a pull request or open an issue and start a conversation and go from there I just thought this was something that was definitely worth taking a look at because this is a wonderful you know little list here and the amount of detail that it goes into with stuff like your uh whereas it's your strong migrations if we open this up uh you know this is where the list really starts to shine where it goes through the entire list of things that you you shouldn't do and how you can do them instead so if you're not familiar with strong migrations it's basically a way for you to ensure that you are migrating correctly it's like a a way for you to assert that you've done the correct thing I guess is the best way to put it so what you do is instead of just removing a column because if you have like a race condition it might uh you know cause the the user to retrieve some data that no longer exists or might cause them to try to retrieve some data that no longer exists you can first start by having the model ignore the column deploy that code so then after the model is done ignoring it all of those requests go through you now know nothing's touching the column so now you can use safety assured which is just a fancy way of saying you're you've done your due diligence it doesn't inherently mean that it's safe it's the the implication of putting this here is it's your seal of approval saying that you verified this is safe now let's go ahead and let's remove this column because nothing's using it because it's ignored Etc and there's other options here for the other the other ways of migrating your database and this whole list is really useful that's where I think this uh this entire production checklist really shines it's not necessarily the list itself it's the links to the resources so that's why I'm going to have the link in the video description uh just something that I thought was worth covering because it does seem very useful yeah that's going to do it for this video hopefully you enjoyed I'll also have a link to this in the pin comments you can go ahead and click on it there and hopefully I'll see you in the next video" }
      ]
    }
  ]
}.to_json

# Sending the request using HTTParty
response = HTTParty.post(
  url,
  headers: { 'Content-Type' => 'application/json' },
  body: body
)

# Check for HTTP errors
unless response.success?
  # puts "HTTP Request failed with code #{response.code}"
  # puts "Response body: #{response.body}"
  # exit
end

# Parsing and printing the full response
parsed_response = JSON.parse(response.body)
# puts "Full API Response:\n#{JSON.pretty_generate(parsed_response)}"

# Attempt to extract the AI response
if parsed_response['candidates'] && parsed_response['candidates'][0] && 
   parsed_response['candidates'][0]['content'] && 
   parsed_response['candidates'][0]['content']['parts'] && 
   parsed_response['candidates'][0]['content']['parts'][0] && 
   parsed_response['candidates'][0]['content']['parts'][0]['text']
  
  ai_response_text = parsed_response['candidates'][0]['content']['parts'][0]['text']
  puts "AI Response: #{ai_response_text}"
else
  puts "#{response.body}"
end