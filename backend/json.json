{"video_id":"446E-r0rXHI","words":471,"video_title":"Go in 100 Seconds","creator_channel":"Fireship","description":"Learn the basics of the Go Programming Language. Go (not Golang) was developed at Google as a modern version of C for high-performance server-side applications. https://fireship.io/lessons/learn-go-in-100-lines/\n\n#programming #go #100SecondsOfCode\n\n🔗 Resources\n\nGo in 100 Lines https://fireship.io/lessons/learn-go-in-100-lines/\nGo Docs https://golang.org/doc/\n\n🔥 Get More Content - Upgrade to PRO\n\nUpgrade to Fireship PRO at https://fireship.io/pro\nUse code lORhwXd2 for 25% off your first payment. \n\n🎨 My Editor Settings\n\n- Atom One Dark \n- vscode-icons\n- Fira Code Font\n\n🔖 Topics Covered\n\n- History of Go Development\n- Programming Languages Invented by Ken Thompson \n- Statically-typed Complied Languages\n- Go Modules","video_length":149,"publication_date":"2021-10-07T08:49:35-07:00","is_public":true,"transcript_clean":"go a statically typed compiled language often described as C for the 21st century it's a popular choice for high performance serers side applications and is the language that built tools like Docker cockroach DB and dgraph it was created at Google in 2007 by Legends who really know their stuff like Ken Thompson the inventor of the B and C programming languages version 1.0 was released as open-source software in 2012 it was designed for Simplicity and efficiency and that's why we call it go and not go Lang the source code is compiled down to machine code which means it generally outperforms interpreted languages but it's famous for its extremely fast compile times made possible by Innovations to dependency analysis and even though it's a statically typed language it performs type inference to deliver a syntax that is very concise and practical it also has a package and module system making it easy to Import and Export code between projects to get started install go and then open an empty directory on your system create a file ending and.go then add package main at the top to create a standalone executable then declare a main function which is where your program will start executing go has a standard library of core packages to handle common requirements like math networking or formatted IO by importing fmt we can print a line to the standard output then run the go build command and it quickly compiles the source code and dependencies into an executable binary when it comes to dependencies we can also link to remote packages on GitHub run go mod a knit from the command line and that creates a go module file that enables dependency tracking syntactically go is like a concise version of C or C++ declare a variable with the VAR keyword followed by its name and type and initialize it with a value or you might use the short assignment syntax to replace VAR and let go automatically infer the type and you can Define multiple variables from a single line go has all the other features you would expect in a programming language like arrays Maps loops and control flow but also allows you to store the memory address of a value using pointers while disallowing pointer arithmetic which often leads to dangerous and unpredictable behavior in addition it supports concurrency with go routines which are functions that can run at the same time as other functions by utilizing multiple threads on a CPU this has been go in 100 seconds hit the like button if you want to see more short videos like this and check out the full article to write your first 100 lines of go on fireship iio thanks for watching and I will see you in the next one","transcript_with_time":[{"start":0.199,"duration":5.361,"text":"go a statically typed compiled language"},{"start":3.0,"duration":4.799,"text":"often described as C for the 21st"},{"start":5.56,"duration":4.4,"text":"century it's a popular choice for high"},{"start":7.799,"duration":3.84,"text":"performance serers side applications and"},{"start":9.96,"duration":4.639,"text":"is the language that built tools like"},{"start":11.639,"duration":5.841,"text":"Docker cockroach DB and dgraph it was"},{"start":14.599,"duration":4.401,"text":"created at Google in 2007 by Legends who"},{"start":17.48,"duration":4.0,"text":"really know their stuff like Ken"},{"start":19.0,"duration":4.64,"text":"Thompson the inventor of the B and C"},{"start":21.48,"duration":4.959,"text":"programming languages version 1.0 was"},{"start":23.64,"duration":4.719,"text":"released as open-source software in 2012"},{"start":26.439,"duration":3.881,"text":"it was designed for Simplicity and"},{"start":28.359,"duration":4.08,"text":"efficiency and that's why we call it go"},{"start":30.32,"duration":3.68,"text":"and not go Lang the source code is"},{"start":32.439,"duration":2.921,"text":"compiled down to machine code which"},{"start":34.0,"duration":3.239,"text":"means it generally outperforms"},{"start":35.36,"duration":4.0,"text":"interpreted languages but it's famous"},{"start":37.239,"duration":3.84,"text":"for its extremely fast compile times"},{"start":39.36,"duration":3.719,"text":"made possible by Innovations to"},{"start":41.079,"duration":4.121,"text":"dependency analysis and even though it's"},{"start":43.079,"duration":4.361,"text":"a statically typed language it performs"},{"start":45.2,"duration":4.359,"text":"type inference to deliver a syntax that"},{"start":47.44,"duration":4.32,"text":"is very concise and practical it also"},{"start":49.559,"duration":4.561,"text":"has a package and module system making"},{"start":51.76,"duration":4.68,"text":"it easy to Import and Export code"},{"start":54.12,"duration":4.32,"text":"between projects to get started install"},{"start":56.44,"duration":4.759,"text":"go and then open an empty directory on"},{"start":58.44,"duration":5.079,"text":"your system create a file ending and.go"},{"start":61.199,"duration":4.641,"text":"then add package main at the top to"},{"start":63.519,"duration":4.201,"text":"create a standalone executable then"},{"start":65.84,"duration":4.279,"text":"declare a main function which is where"},{"start":67.72,"duration":4.719,"text":"your program will start executing go has"},{"start":70.119,"duration":4.401,"text":"a standard library of core packages to"},{"start":72.439,"duration":5.0,"text":"handle common requirements like math"},{"start":74.52,"duration":5.4,"text":"networking or formatted IO by importing"},{"start":77.439,"duration":4.841,"text":"fmt we can print a line to the standard"},{"start":79.92,"duration":4.159,"text":"output then run the go build command and"},{"start":82.28,"duration":4.199,"text":"it quickly compiles the source code and"},{"start":84.079,"duration":3.961,"text":"dependencies into an executable binary"},{"start":86.479,"duration":3.68,"text":"when it comes to dependencies we can"},{"start":88.04,"duration":4.32,"text":"also link to remote packages on GitHub"},{"start":90.159,"duration":4.041,"text":"run go mod a knit from the command line"},{"start":92.36,"duration":3.439,"text":"and that creates a go module file that"},{"start":94.2,"duration":3.559,"text":"enables dependency tracking"},{"start":95.799,"duration":5.0,"text":"syntactically go is like a concise"},{"start":97.759,"duration":4.841,"text":"version of C or C++ declare a variable"},{"start":100.799,"duration":4.041,"text":"with the VAR keyword followed by its"},{"start":102.6,"duration":3.76,"text":"name and type and initialize it with a"},{"start":104.84,"duration":3.959,"text":"value or you might use the short"},{"start":106.36,"duration":4.64,"text":"assignment syntax to replace VAR and let"},{"start":108.799,"duration":3.881,"text":"go automatically infer the type and you"},{"start":111.0,"duration":3.36,"text":"can Define multiple variables from a"},{"start":112.68,"duration":2.759,"text":"single line go has all the other"},{"start":114.36,"duration":3.039,"text":"features you would expect in a"},{"start":115.439,"duration":4.04,"text":"programming language like arrays Maps"},{"start":117.399,"duration":3.76,"text":"loops and control flow but also allows"},{"start":119.479,"duration":3.841,"text":"you to store the memory address of a"},{"start":121.159,"duration":4.32,"text":"value using pointers while disallowing"},{"start":123.32,"duration":4.439,"text":"pointer arithmetic which often leads to"},{"start":125.479,"duration":4.521,"text":"dangerous and unpredictable behavior in"},{"start":127.759,"duration":3.881,"text":"addition it supports concurrency with go"},{"start":130.0,"duration":3.8,"text":"routines which are functions that can"},{"start":131.64,"duration":4.879,"text":"run at the same time as other functions"},{"start":133.8,"duration":5.04,"text":"by utilizing multiple threads on a CPU"},{"start":136.519,"duration":3.44,"text":"this has been go in 100 seconds hit the"},{"start":138.84,"duration":2.8,"text":"like button if you want to see more"},{"start":139.959,"duration":3.481,"text":"short videos like this and check out the"},{"start":141.64,"duration":4.08,"text":"full article to write your first 100"},{"start":143.44,"duration":4.159,"text":"lines of go on fireship iio thanks for"},{"start":145.72,"duration":4.879,"text":"watching and I will see you in the next"},{"start":147.599,"duration":3.0,"text":"one"}],"transcript_with_time_2":"00:00:00 - go a statically typed compiled language\n00:00:03 - often described as C for the 21st\n00:00:05 - century it's a popular choice for high\n00:00:07 - performance serers side applications and\n00:00:09 - is the language that built tools like\n00:00:11 - Docker cockroach DB and dgraph it was\n00:00:14 - created at Google in 2007 by Legends who\n00:00:17 - really know their stuff like Ken\n00:00:19 - Thompson the inventor of the B and C\n00:00:21 - programming languages version 1.0 was\n00:00:23 - released as open-source software in 2012\n00:00:26 - it was designed for Simplicity and\n00:00:28 - efficiency and that's why we call it go\n00:00:30 - and not go Lang the source code is\n00:00:32 - compiled down to machine code which\n00:00:34 - means it generally outperforms\n00:00:35 - interpreted languages but it's famous\n00:00:37 - for its extremely fast compile times\n00:00:39 - made possible by Innovations to\n00:00:41 - dependency analysis and even though it's\n00:00:43 - a statically typed language it performs\n00:00:45 - type inference to deliver a syntax that\n00:00:47 - is very concise and practical it also\n00:00:49 - has a package and module system making\n00:00:51 - it easy to Import and Export code\n00:00:54 - between projects to get started install\n00:00:56 - go and then open an empty directory on\n00:00:58 - your system create a file ending and.go\n00:01:01 - then add package main at the top to\n00:01:03 - create a standalone executable then\n00:01:05 - declare a main function which is where\n00:01:07 - your program will start executing go has\n00:01:10 - a standard library of core packages to\n00:01:12 - handle common requirements like math\n00:01:14 - networking or formatted IO by importing\n00:01:17 - fmt we can print a line to the standard\n00:01:19 - output then run the go build command and\n00:01:22 - it quickly compiles the source code and\n00:01:24 - dependencies into an executable binary\n00:01:26 - when it comes to dependencies we can\n00:01:28 - also link to remote packages on GitHub\n00:01:30 - run go mod a knit from the command line\n00:01:32 - and that creates a go module file that\n00:01:34 - enables dependency tracking\n00:01:35 - syntactically go is like a concise\n00:01:37 - version of C or C++ declare a variable\n00:01:40 - with the VAR keyword followed by its\n00:01:42 - name and type and initialize it with a\n00:01:44 - value or you might use the short\n00:01:46 - assignment syntax to replace VAR and let\n00:01:48 - go automatically infer the type and you\n00:01:51 - can Define multiple variables from a\n00:01:52 - single line go has all the other\n00:01:54 - features you would expect in a\n00:01:55 - programming language like arrays Maps\n00:01:57 - loops and control flow but also allows\n00:01:59 - you to store the memory address of a\n00:02:01 - value using pointers while disallowing\n00:02:03 - pointer arithmetic which often leads to\n00:02:05 - dangerous and unpredictable behavior in\n00:02:07 - addition it supports concurrency with go\n00:02:10 - routines which are functions that can\n00:02:11 - run at the same time as other functions\n00:02:13 - by utilizing multiple threads on a CPU\n00:02:16 - this has been go in 100 seconds hit the\n00:02:18 - like button if you want to see more\n00:02:19 - short videos like this and check out the\n00:02:21 - full article to write your first 100\n00:02:23 - lines of go on fireship iio thanks for\n00:02:25 - watching and I will see you in the next\n00:02:27 - one","ai_summary_clean":{"summarize_ai":"# ملخص فيديو \"Go في 100 ثانية\"\n\n## 1. قائمة المواضيع الرئيسية التي تم تناولها:\n1. تعريف لغة Go\n2. تاريخ ونشأة Go\n3. مميزات لغة Go\n4. كيفية البدء في استخدام Go\n5. مكتبة Go القياسية\n6. إدارة الاعتمادات في Go\n7. بناء الجمل والأنواع في Go\n8. خصائص أخرى في Go مثل المؤشرات والتزامن\n\n## 2. ملخص مفصل لكل موضوع رئيسي:\n\n### 1. **تعريف لغة Go**\n   - Go هي لغة برمجة ذات نوع ثابت ومترجمة، تُعرف غالبًا بأنها C للقرن الحادي والعشرين. تُستخدم بشكل شائع لتطبيقات الخوادم عالية الأداء، وقد طورت أدوات مثل Docker وCockroachDB وDgraph.\n\n### 2. **تاريخ ونشأة Go**\n   - تم إنشاء Go في عام 2007 من قبل مجموعة من الأساطير في مجال البرمجة، مثل كين طومسون، مبتكر لغتي البرمجة B وC. تم إصدار النسخة 1.0 كبرنامج مفتوح المصدر في عام 2012.\n\n### 3. **مميزات لغة Go**\n   - تم تصميم Go من أجل البساطة والكفاءة. تتميز بوقت تجميع سريع بفضل الابتكارات في تحليل الاعتماد. على الرغم من كونها لغة ذات نوع ثابت، إلا أنها تدعم الاستدلال النوعي لتقديم بنية جمل مختصرة وعملية.\n\n### 4. **كيفية البدء في استخدام Go**\n   - للبدء، يجب تثبيت Go، ثم فتح دليل فارغ على النظام. يُمكن إنشاء ملف بامتداد .go مع إضافة \"package main\" في البداية لإنشاء تطبيق تنفيذي مستقل.\n\n### 5. **مكتبة Go القياسية**\n   - تحتوي Go على مكتبة قياسية تضم حزم أساسية للتعامل مع متطلبات شائعة مثل الرياضيات والشبكات وإدخال وإخراج البيانات. يمكن استيراد الحزمة fmt لطباعة سطر إلى المخرجات القياسية.\n\n### 6. **إدارة الاعتمادات في Go**\n   - يمكن ربط الحزم عن بُعد على GitHub باستخدام الأمر `go mod init` من سطر الأوامر لإنشاء ملف وحدة Go الذي يمكّن تتبع الاعتماد.\n\n### 7. **بناء الجمل والأنواع في Go**\n   - تشبه Go بشكل عام إصدارًا مختصرًا من C أو C++. يمكن إعلان متغير باستخدام الكلمة المفتاحية VAR متبوعة باسمه ونوعه، أو استخدام صياغة التخصيص القصير لتمكين Go من استنتاج النوع تلقائيًا.\n\n### 8. **خصائص أخرى في Go مثل المؤشرات والتزامن**\n   - تدعم Go ميزات أخرى مثل المصفوفات والخرائط والحلقات وتدفق التحكم، كما تسمح بتخزين عنوان الذاكرة لقيمة باستخدام المؤشرات، مع منع الحسابات المؤشرية التي قد تؤدي إلى سلوك غير متوقع. توفر Go أيضًا دعمًا للتزامن من خلال التزامن باستخدام go routines، مما يسمح بتشغيل وظائف متعددة في نفس الوقت على وحدة المعالجة المركزية.\n\n## 3. المصادر والمراجع:\n- [الموقع الرسمي للغة Go](https://golang.org/)\n- [دليل البدء السريع لبرنامج Go](https://golang.org/doc/install/source)\n- [مقال عن استخدام Go في تطوير التطبيقات](https://fireship.io)\n\n## 4. خريطة المفاهيم:\n- **لغة Go**\n  - تعريف\n  - تاريخ ونشأة\n  - مميزات\n    - سرعة التجميع\n    - الاستدلال النوعي\n  - كيفية البدء \n    - تثبيت Go\n    - إنشاء ملفات\n  - مكتبة قياسية\n  - إدارة الاعتمادات\n  - بناء الجمل والأنواع\n  - خصائص أخرى\n    - المؤشرات\n    - التزامن\n\nهذا الملخص يوفر نظرة شاملة على ما تم تناوله في الفيديو حول لغة Go، مما يمكن المتعلمين من فهم الأساسيات بشكل أسرع وأفضل."},"ai_summary_with_time":{"summarize_ai":"# ملخص فيديو يوتيوب حول لغة البرمجة Go\n\n## 1. قائمة المواضيع الرئيسية التي تم تناولها:\n1. مقدمة عن لغة Go\n2. تاريخ تطوير لغة Go\n3. ميزات لغة Go\n4. كيفية البدء في استخدام Go\n5. أمثلة على بنية اللغة\n6. دعم التزامن في Go\n\n---\n\n## 2. ملخص تفصيلي\n\n### 1. مقدمة عن لغة Go\n- **يبدأ في [00:00:00]**\n- تتحدث هذه الفقرة عن لغة Go، التي تُعتبر لغة برمجة ذات نوع ثابت وتُترجم. تُعرف بأنها الخيار الشائع للتطبيقات عالية الأداء في الجانب الخادم. تم استخدام Go لتطوير أدوات مثل Docker وCockroach DB وDgraph. \n\n### 2. تاريخ تطوير لغة Go\n- **يبدأ في [00:00:17]**\n- تم إنشاء Go في عام 2007 بواسطة مجموعة من المبرمجين المبدعين في Google، بما في ذلك كين طومسون، مخترع لغات B وC. تم إصدار النسخة 1.0 كبرنامج مفتوح المصدر في عام 2012.\n\n### 3. ميزات لغة Go\n- **يبدأ في [00:00:26]**\n- تم تصميم Go من أجل البساطة والكفاءة. تتميز بسرعة وقت التجميع، وذلك بفضل الابتكارات في تحليل الاعتماد. تقدم اللغة نظام حزم ووحدات يسهل استيراد وتصدير الشيفرات بين المشاريع. \n\n### 4. كيفية البدء في استخدام Go\n- **يبدأ في [00:00:56]**\n- لبدء العمل مع Go، يجب تثبيتها ثم إنشاء ملف جديد ينتهي بملحق .go. يجب إضافة \"package main\" في بداية الملف لتعريف البرنامج القابل للتنفيذ. \n\n### 5. أمثلة على بنية اللغة\n- **يبدأ في [00:01:37]**\n- يتحدث الجزء هذا عن كيفية تعريف المتغيرات، مع توفير مثال على كيفية استخدام الكلمة المفتاحية VAR. كما أن هناك أسلوب مختصر لتعريف المتغيرات باستخدام التخصيص التلقائي. \n\n### 6. دعم التزامن في Go\n- **يبدأ في [00:02:10]**\n- تقدم Go دعمًا للتزامن عبر الروتينات Go، والتي تسمح بتشغيل الدوال في وقت واحد باستخدام عدة خيوط على وحدة المعالجة المركزية. \n\n---\n\n## 3. المصادر والمراجع\n- [موقع Go الرسمي](https://golang.org)\n- [مقالات حول Go](https://fireship.io)\n\n---\n\n## 4. خريطة المفاهيم\n1. **لغة Go**\n   - تعريف\n   - الاستخدامات\n2. **تاريخ Go**\n   - تاريخ الإنشاء\n   - المساهمون الرئيسيون\n3. **ميزات Go**\n   - البساطة\n   - سرعة التجميع\n   - نظام الحزم\n4. **بدء استخدام Go**\n   - خطوات التثبيت\n   - إعداد مشروع جديد\n5. **بنية اللغة**\n   - تعريف المتغيرات\n   - المميزات النصية\n6. **التزامن في Go**\n   - الروتينات Go\n   - إدارة الخيوط\n\n---\n\nهذا الملخص يغطي النقاط الأساسية التي تم تناولها في الفيديو ويساعد في فهم المفاهيم الرئيسية بسرعة. يمكن للمهتمين في تعلم لغة Go الاستفادة من هذه المعلومات كمرجع سريع."},"raw_transcript":[{"start":0.199,"duration":5.361,"text":"go a statically typed compiled language"},{"start":3.0,"duration":4.799,"text":"often described as C for the 21st"},{"start":5.56,"duration":4.4,"text":"century it's a popular choice for high"},{"start":7.799,"duration":3.84,"text":"performance serers side applications and"},{"start":9.96,"duration":4.639,"text":"is the language that built tools like"},{"start":11.639,"duration":5.841,"text":"Docker cockroach DB and dgraph it was"},{"start":14.599,"duration":4.401,"text":"created at Google in 2007 by Legends who"},{"start":17.48,"duration":4.0,"text":"really know their stuff like Ken"},{"start":19.0,"duration":4.64,"text":"Thompson the inventor of the B and C"},{"start":21.48,"duration":4.959,"text":"programming languages version 1.0 was"},{"start":23.64,"duration":4.719,"text":"released as open-source software in 2012"},{"start":26.439,"duration":3.881,"text":"it was designed for Simplicity and"},{"start":28.359,"duration":4.08,"text":"efficiency and that's why we call it go"},{"start":30.32,"duration":3.68,"text":"and not go Lang the source code is"},{"start":32.439,"duration":2.921,"text":"compiled down to machine code which"},{"start":34.0,"duration":3.239,"text":"means it generally outperforms"},{"start":35.36,"duration":4.0,"text":"interpreted languages but it's famous"},{"start":37.239,"duration":3.84,"text":"for its extremely fast compile times"},{"start":39.36,"duration":3.719,"text":"made possible by Innovations to"},{"start":41.079,"duration":4.121,"text":"dependency analysis and even though it's"},{"start":43.079,"duration":4.361,"text":"a statically typed language it performs"},{"start":45.2,"duration":4.359,"text":"type inference to deliver a syntax that"},{"start":47.44,"duration":4.32,"text":"is very concise and practical it also"},{"start":49.559,"duration":4.561,"text":"has a package and module system making"},{"start":51.76,"duration":4.68,"text":"it easy to Import and Export code"},{"start":54.12,"duration":4.32,"text":"between projects to get started install"},{"start":56.44,"duration":4.759,"text":"go and then open an empty directory on"},{"start":58.44,"duration":5.079,"text":"your system create a file ending and.go"},{"start":61.199,"duration":4.641,"text":"then add package main at the top to"},{"start":63.519,"duration":4.201,"text":"create a standalone executable then"},{"start":65.84,"duration":4.279,"text":"declare a main function which is where"},{"start":67.72,"duration":4.719,"text":"your program will start executing go has"},{"start":70.119,"duration":4.401,"text":"a standard library of core packages to"},{"start":72.439,"duration":5.0,"text":"handle common requirements like math"},{"start":74.52,"duration":5.4,"text":"networking or formatted IO by importing"},{"start":77.439,"duration":4.841,"text":"fmt we can print a line to the standard"},{"start":79.92,"duration":4.159,"text":"output then run the go build command and"},{"start":82.28,"duration":4.199,"text":"it quickly compiles the source code and"},{"start":84.079,"duration":3.961,"text":"dependencies into an executable binary"},{"start":86.479,"duration":3.68,"text":"when it comes to dependencies we can"},{"start":88.04,"duration":4.32,"text":"also link to remote packages on GitHub"},{"start":90.159,"duration":4.041,"text":"run go mod a knit from the command line"},{"start":92.36,"duration":3.439,"text":"and that creates a go module file that"},{"start":94.2,"duration":3.559,"text":"enables dependency tracking"},{"start":95.799,"duration":5.0,"text":"syntactically go is like a concise"},{"start":97.759,"duration":4.841,"text":"version of C or C++ declare a variable"},{"start":100.799,"duration":4.041,"text":"with the VAR keyword followed by its"},{"start":102.6,"duration":3.76,"text":"name and type and initialize it with a"},{"start":104.84,"duration":3.959,"text":"value or you might use the short"},{"start":106.36,"duration":4.64,"text":"assignment syntax to replace VAR and let"},{"start":108.799,"duration":3.881,"text":"go automatically infer the type and you"},{"start":111.0,"duration":3.36,"text":"can Define multiple variables from a"},{"start":112.68,"duration":2.759,"text":"single line go has all the other"},{"start":114.36,"duration":3.039,"text":"features you would expect in a"},{"start":115.439,"duration":4.04,"text":"programming language like arrays Maps"},{"start":117.399,"duration":3.76,"text":"loops and control flow but also allows"},{"start":119.479,"duration":3.841,"text":"you to store the memory address of a"},{"start":121.159,"duration":4.32,"text":"value using pointers while disallowing"},{"start":123.32,"duration":4.439,"text":"pointer arithmetic which often leads to"},{"start":125.479,"duration":4.521,"text":"dangerous and unpredictable behavior in"},{"start":127.759,"duration":3.881,"text":"addition it supports concurrency with go"},{"start":130.0,"duration":3.8,"text":"routines which are functions that can"},{"start":131.64,"duration":4.879,"text":"run at the same time as other functions"},{"start":133.8,"duration":5.04,"text":"by utilizing multiple threads on a CPU"},{"start":136.519,"duration":3.44,"text":"this has been go in 100 seconds hit the"},{"start":138.84,"duration":2.8,"text":"like button if you want to see more"},{"start":139.959,"duration":3.481,"text":"short videos like this and check out the"},{"start":141.64,"duration":4.08,"text":"full article to write your first 100"},{"start":143.44,"duration":4.159,"text":"lines of go on fireship iio thanks for"},{"start":145.72,"duration":4.879,"text":"watching and I will see you in the next"},{"start":147.599,"duration":3.0,"text":"one"}]}