===== app/layout.jsx =====
import './globals.css'

// أمثلة لبيانات الـmetadata لو أردت استخدامها في Next.js
export const metadata = {
  title: "v0 App",
  description: "Created with v0",
  generator: "v0.dev",
}

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  )
}



===== app/page.jsx =====
"use client"

import React, { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { useToast } from "@/hooks/use-toast"
import { VideoSummaryCard } from "@/components/video-summary-card"
import Logo from "@/components/logo"
import { FloatingNav } from "@/components/floating-nav"
import { cn } from "@/lib/utils"
import { BackgroundGradient } from "@/components/ui/background-gradient"
import { SparklesCore } from "@/components/ui/sparkles"
import { TextGenerateEffect } from "@/components/ui/text-generate-effect"
import { TracingBeam } from "@/components/ui/tracing-beam"
import { HeroParallax } from "@/components/hero-parallax"
import { AnimatedTooltip } from "@/components/ui/animated-tooltip"
import { ArrowRight, Sparkles, Zap, Clock, FileText, BarChart4 } from "lucide-react"
import { GlowingButton } from "@/components/ui/glowing-button"
import { Spotlight } from "@/components/ui/spotlight"
import { DotGrid } from "@/components/ui/dot-grid"
import { ScrollReveal } from "@/components/ui/scroll-reveal"
import { GradientBorder } from "@/components/ui/gradient-border"
import { PinContainer } from "@/components/ui/pin-container"
import { FeatureCard } from "@/components/ui/feature-card"

export default function Home() {
  const { toast } = useToast()
  const [videoData, setVideoData] = useState(null)
  const [isLoading, setIsLoading] = useState(false)
  const [videoUrl, setVideoUrl] = useState("")
  const [scrolled, setScrolled] = useState(false)

  // When you scroll beyond 50px, show floating nav
  useEffect(() => {
    const handleScroll = () => {
      setScrolled(window.scrollY > 50)
    }
    window.addEventListener("scroll", handleScroll)
    return () => window.removeEventListener("scroll", handleScroll)
  }, [])

  // Optional: smooth scroll with arrow keys
  useEffect(() => {
    let scrolling = false
    let scrollAmount = 0
    const scrollStep = 5
    const maxScrollSpeed = 15
    const acceleration = 0.8
    const deceleration = 1.5

    const smoothScroll = () => {
      if (scrollAmount !== 0) {
        window.scrollBy(0, scrollAmount)
        requestAnimationFrame(smoothScroll)
      } else {
        scrolling = false
      }
    }

    const handleKeyDown = (e) => {
      if (e.key === "ArrowDown") {
        e.preventDefault()
        scrollAmount = Math.min(scrollAmount + scrollStep * acceleration, maxScrollSpeed)
        if (!scrolling) {
          scrolling = true
          requestAnimationFrame(smoothScroll)
        }
      } else if (e.key === "ArrowUp") {
        e.preventDefault()
        scrollAmount = Math.max(scrollAmount - scrollStep * acceleration, -maxScrollSpeed)
        if (!scrolling) {
          scrolling = true
          requestAnimationFrame(smoothScroll)
        }
      }
    }

    const handleKeyUp = (e) => {
      if (e.key === "ArrowDown" || e.key === "ArrowUp") {
        const slowDown = () => {
          if (scrollAmount > 0) {
            scrollAmount = Math.max(0, scrollAmount - deceleration)
          } else if (scrollAmount < 0) {
            scrollAmount = Math.min(0, scrollAmount + deceleration)
          }
          if (scrollAmount !== 0) {
            requestAnimationFrame(slowDown)
          }
        }
        requestAnimationFrame(slowDown)
      }
    }

    window.addEventListener("keydown", handleKeyDown)
    window.addEventListener("keyup", handleKeyUp)
    return () => {
      window.removeEventListener("keydown", handleKeyDown)
      window.removeEventListener("keyup", handleKeyUp)
      scrollAmount = 0
    }
  }, [])

  /** Post user data -> sets cookie if we have correct CORS and credentials. */
  async function registerUser() {
    try {
      // Just an example payload
      const userPayload = {
        user: {
          visitor_id: "random-20-char-id",
          ip: "127.0.0.1",
          country: "Saudi Arabia",
          device: "Mac, Safari",
        },
      }

      const res = await fetch("http://127.0.0.1:3000/users/cookies", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        credentials: "include", // crucial for cross-origin cookies
        body: JSON.stringify(userPayload),
      })

      if (!res.ok) throw new Error("Failed to register user")
      // If your server sets a cookie via Set-Cookie, the browser will store it automatically.
      // If server returns JSON, you can read it:
      const data = await res.json()
      console.log("Registered user, cookie info: ", data)
    } catch (err) {
      console.error("Error registering user:", err)
    }
  }

  /** GET /videos/:videoId with credentials to automatically send the cookie. */
  async function getVideoData(videoId) {
    const response = await fetch(`http://127.0.0.1:3000/videos/${videoId}`, {
      method: "GET",
      credentials: "include", // again important for cross-origin cookies
    })
    if (!response.ok) throw new Error(`Failed to fetch video data: ${response.status}`)
    return response.json()
  }

  /** The main form submission for analyzing a YouTube URL. */
  async function fetchVideoData(e) {
    e.preventDefault()
    if (!videoUrl) return

    // Extract the 11-char video ID from the URL:
    const videoId = extractYoutubeVideoId(videoUrl)
    if (!videoId) {
      toast({
        title: "Error",
        description: "Invalid URL. Please enter a valid YouTube link",
        variant: "destructive",
      })
      return
    }

    setIsLoading(true)

    try {
      // 1) register user if not already done
      await registerUser()

      // 2) now fetch the actual video data
      const data = await getVideoData(videoId)
      setVideoData(data)

      toast({
        title: "Success",
        description: "Video data and summary extracted successfully",
      })

      setTimeout(() => {
        document.getElementById("results")?.scrollIntoView({ behavior: "smooth" })
      }, 100)
    } catch (error) {
      console.error("Error:", error)
      setIsLoading(false)
      toast({
        title: "Request Error",
        description: "An error occurred while fetching video data",
        variant: "destructive",
      })
    } finally {
      setIsLoading(false)
    }
  }

  /** Attempt to parse 11-char YouTube video ID from a given URL. */
  function extractYoutubeVideoId(url) {
    const regExp = /^.*(youtu\.be\/|v\/|u\/\w\/|embed\/|watch\?v=|&v=)([^#&?]*).*/
    const match = url.match(regExp)
    return match && match[2].length === 11 ? match[2] : null
  }

  const navItems = [
    { name: "Home", link: "#hero" },
    { name: "Features", link: "#features" },
    { name: "How It Works", link: "#how-it-works" },
    { name: "FAQ", link: "#faq" },
  ]

  const features = [
    {
      title: "Smart Summarization",
      description:
        "Our AI analyzes video content and extracts key insights, providing concise summaries that capture the essence of the content.",
      icon: <Sparkles className="h-6 w-6 text-black" />,
    },
    {
      title: "Text Extraction",
      description:
        "Convert spoken words into searchable text with our advanced speech recognition technology for easy reference and sharing.",
      icon: <FileText className="h-6 w-6 text-black" />,
    },
    {
      title: "Lightning Speed",
      description:
        "Get results in seconds regardless of video length, with our optimized processing algorithms working in real-time.",
      icon: <Zap className="h-6 w-6 text-black" />,
    },
    {
      title: "Time Efficiency",
      description:
        "Save hours of watching and note-taking with our automated summarization that highlights only what matters.",
      icon: <Clock className="h-6 w-6 text-black" />,
    },
    {
      title: "Multilingual Support",
      description:
        "Process videos in multiple languages with our advanced language recognition and translation capabilities.",
      icon: <BarChart4 className="h-6 w-6 text-black" />,
    },
    {
      title: "Customizable Output",
      description:
        "Tailor summaries to your needs with adjustable length, focus areas, and formatting options for perfect results.",
      icon: <ArrowRight className="h-6 w-6 text-black" />,
    },
  ]

  const team = [
    { id: 1, name: "Alex Johnson", designation: "Founder & CEO", image: "/placeholder.svg?height=100&width=100" },
    { id: 2, name: "Sarah Miller", designation: "AI Engineer", image: "/placeholder.svg?height=100&width=100" },
    { id: 3, name: "Michael Chen", designation: "UI Developer", image: "/placeholder.svg?height=100&width=100" },
    { id: 4, name: "Nora Ahmed", designation: "Product Manager", image: "/placeholder.svg?height=100&width=100" },
  ]

  const useCases = [
    { title: "Educational Content", link: "#", thumbnail: "/images/v0-logo-square.jpeg" },
    { title: "Business Meetings", link: "#", thumbnail: "/images/v0-logo.png" },
    { title: "Research Interviews", link: "#", thumbnail: "/images/v0-search.png" },
    { title: "News & Media", link: "#", thumbnail: "/images/v0-logo-square.jpeg" },
  ]

  return (
    <main className="min-h-screen bg-white text-black overflow-hidden font-light max-w-[2000px] mx-auto">
      <FloatingNav
        navItems={navItems}
        className={cn("transition-all duration-300", {
          "opacity-100": scrolled,
          "opacity-0 pointer-events-none": !scrolled,
        })}
      />

      {/* Hero Section */}
      <section
        id="hero"
        className="relative min-h-screen flex items-center justify-center overflow-hidden px-4 sm:px-6 lg:px-8"
      >
        <Spotlight className="-top-40 left-0 md:left-auto md:-top-20 md:left-60" fill="white" />

        <div className="absolute inset-0 w-full h-full">
          <SparklesCore
            id="tsparticles"
            background="transparent"
            minSize={0.4}
            maxSize={0.8}
            particleDensity={70}
            className="w-full h-full"
            particleColor="#000000"
            speed={0.1}
          />
        </div>

        <div className="absolute top-0 left-0 right-0 z-50">
          <header
            className={cn("flex items-center justify-between py-6 px-8 transition-all duration-500", {
              "bg-white/95 backdrop-blur-lg shadow-[0_0_15px_rgba(0,0,0,0.03)] border-b border-gray-50": scrolled,
            })}
          >
            <Logo />
            <div className="flex items-center gap-6">
              <nav className="hidden md:flex items-center gap-8">
                {navItems.map((item) => (
                  <a
                    key={item.name}
                    href={item.link}
                    className="text-gray-600 hover:text-black transition-colors font-normal text-sm uppercase tracking-wider"
                  >
                    {item.name}
                  </a>
                ))}
              </nav>
              <GradientBorder className="rounded-full overflow-hidden">
                <Button className="bg-white text-black hover:bg-gray-50 rounded-full">Free Trial</Button>
              </GradientBorder>
            </div>
          </header>
        </div>

        <div className="container mx-auto px-4 sm:px-6 lg:px-8 xl:px-12 2xl:px-16 relative z-10">
          <div className="max-w-5xl mx-auto text-center space-y-10">
            <div className="mb-6 inline-block">
              <PinContainer>
                <span className="px-6 py-3 rounded-full bg-white shadow-[0_8px_30px_rgb(0,0,0,0.04)] border border-gray-100 text-sm font-medium tracking-wide">
                  AI-Powered Video Analysis
                </span>
              </PinContainer>
            </div>

            <h1 className="text-5xl sm:text-6xl md:text-7xl lg:text-8xl font-normal leading-tight tracking-tight">
              <TextGenerateEffect
                words="Unlock Video Knowledge in Seconds"
                className="text-transparent bg-clip-text bg-gradient-to-r from-gray-900 via-gray-700 to-gray-900"
              />
            </h1>

            <p className="text-xl md:text-2xl text-gray-500 max-w-3xl mx-auto font-extralight leading-relaxed tracking-wide">
              Our AI instantly transforms any video into actionable insights, saving you hours of watching and
              note-taking.
            </p>

            <div className="flex flex-col sm:flex-row justify-center gap-6 pt-12">
              <GlowingButton>
                Start Now for Free
                <ArrowRight className="ml-2 h-5 w-5 transition-transform duration-300 group-hover:translate-x-1" />
              </GlowingButton>

              <Button
                variant="outline"
                size="lg"
                className="border-gray-200 text-gray-700 hover:bg-gray-50 text-base py-7 px-10 rounded-full transition-all duration-500"
              >
                Watch Demo
              </Button>
            </div>
          </div>

          <div className="mt-32 max-w-4xl mx-auto">
            <div className="relative z-10">
              <form onSubmit={fetchVideoData} className="relative">
                <div className="flex items-center relative">
                  <div className="absolute left-6 flex items-center justify-center">
                    <div className="w-8 h-8 flex items-center justify-center rounded-full bg-black/10">
                      <svg
                        width="16"
                        height="16"
                        viewBox="0 0 24 24"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M21 21L15 15M17 10C17 13.866 13.866 17 10 17C6.13401 17 3 13.866 3 10C3 6.13401 6.13401 3 10 3C13.866 3 17 6.13401 17 10Z"
                          stroke="currentColor"
                          strokeWidth="2"
                          strokeLinecap="round"
                          strokeLinejoin="round"
                        />
                      </svg>
                    </div>
                  </div>

                  <input
                    type="text"
                    id="video-url"
                    placeholder="Paste YouTube URL here..."
                    value={videoUrl}
                    onChange={(e) => setVideoUrl(e.target.value)}
                    className="w-full h-16 pl-20 pr-36 bg-black/90 text-white text-lg rounded-full shadow-2xl border-0 focus:outline-none focus:ring-2 focus:ring-white/20 transition-all"
                  />

                  <div className="absolute right-2">
                    <Button
                      type="submit"
                      disabled={isLoading || !videoUrl}
                      className="h-12 px-6 bg-white hover:bg-gray-100 text-black font-medium rounded-full transition-all duration-300 flex items-center gap-2"
                    >
                      {isLoading ? (
                        <>
                          <svg
                            className="animate-spin h-4 w-4 text-black"
                            xmlns="http://www.w3.org/2000/svg"
                            fill="none"
                            viewBox="0 0 24 24"
                          >
                            <circle
                              className="opacity-25"
                              cx="12"
                              cy="12"
                              r="10"
                              stroke="currentColor"
                              strokeWidth="4"
                            ></circle>
                            <path
                              className="opacity-75"
                              fill="currentColor"
                              d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                            ></path>
                          </svg>
                          <span>Processing</span>
                        </>
                      ) : (
                        <>
                          <span>Analyze</span>
                          <ArrowRight className="h-4 w-4" />
                        </>
                      )}
                    </Button>
                  </div>
                </div>
              </form>

              <div className="absolute inset-0 -z-10 blur-3xl opacity-30">
                <div className="absolute inset-0 bg-gradient-to-r from-purple-500 via-blue-500 to-indigo-500 rounded-full"></div>
              </div>
            </div>
          </div>
        </div>

        <div className="absolute bottom-10 left-1/2 transform -translate-x-1/2 animate-bounce">
          <a href="#features" className="text-gray-400 hover:text-black transition-colors">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              strokeWidth="2"
              strokeLinecap="round"
              strokeLinejoin="round"
            >
              <path d="m6 9 6 6 6-6" />
            </svg>
          </a>
        </div>
      </section>

      {/* Features Section */}
      <section id="features" className="py-32 bg-white relative overflow-hidden">
        <DotGrid />
        <div className="container mx-auto px-4 sm:px-6 lg:px-8 xl:px-12 2xl:px-16">
          <ScrollReveal>
            <div className="text-center mb-20">
              <span className="px-4 py-2 rounded-full bg-white shadow-[0_8px_30px_rgb(0,0,0,0.04)] border border-gray-100 text-sm font-medium tracking-wider inline-block mb-6">
                Features
              </span>
              <h2 className="text-5xl md:text-6xl font-extralight mb-6 tracking-tight">Powerful Capabilities</h2>
              <p className="text-xl text-gray-500 max-w-3xl mx-auto font-extralight">
                Discover how our platform can help you save time and extract important information from videos
              </p>
            </div>
          </ScrollReveal>

          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 sm:gap-8">
            {features.map((feature, index) => (
              <ScrollReveal key={index} delay={index * 0.1}>
                <FeatureCard title={feature.title} description={feature.description} icon={feature.icon} />
              </ScrollReveal>
            ))}
          </div>
        </div>
      </section>

      <section className="py-32 bg-white">
        <BackgroundGradient>
          <div className="container mx-auto px-4 sm:px-6 lg:px-8 xl:px-12 2xl:px-16">
            <HeroParallax products={useCases} />
          </div>
        </BackgroundGradient>
      </section>

      {/* How It Works */}
      <section id="how-it-works" className="py-32 bg-black text-white relative">
        <div className="absolute inset-0 bg-[radial-gradient(ellipse_at_center,rgba(255,255,255,0.15),transparent)]"></div>

        <div className="container mx-auto px-4 sm:px-6 lg:px-8 xl:px-12 2xl:px-16 relative z-10">
          <div className="text-center mb-20">
            <span className="px-4 py-2 rounded-full bg-white/5 border border-white/10 text-sm font-medium tracking-wider inline-block mb-6">
              Process
            </span>
            <h2 className="text-5xl md:text-6xl font-extralight mb-6 tracking-tight">How It Works</h2>
            <p className="text-xl text-gray-400 max-w-3xl mx-auto font-extralight">
              A simple and effective process for converting videos into accurate text summaries
            </p>
          </div>

          <div className="max-w-5xl mx-auto">
            <TracingBeam>
              <div className="space-y-32">
                <div className="flex flex-col md:flex-row gap-12 items-center">
                  <div className="w-full md:w-1/2">
                    <span className="inline-block text-sm font-medium text-gray-400 mb-3 tracking-wider">Step 01</span>
                    <h3 className="text-3xl font-light mb-6">Enter Video URL</h3>
                    <p className="text-gray-300 text-lg mb-8 font-extralight leading-relaxed">
                      Copy the video URL from YouTube and paste it in the designated field. The link can be in any
                      YouTube URL format.
                    </p>
                  </div>
                  <div className="w-full md:w-1/2">
                    <div className="rounded-3xl overflow-hidden border border-white/10 shadow-2xl transform transition-transform duration-700 hover:scale-[1.02] group">
                      <img
                        src="/images/v0-search.png"
                        alt="Enter Video URL"
                        className="w-full h-auto transition-all duration-700 group-hover:brightness-110"
                      />
                    </div>
                  </div>
                </div>

                <div className="flex flex-col md:flex-row gap-12 items-center">
                  <div className="w-full md:w-1/2 order-1 md:order-2">
                    <span className="inline-block text-sm font-medium text-gray-400 mb-3 tracking-wider">Step 02</span>
                    <h3 className="text-3xl font-light mb-6">Video Processing</h3>
                    <p className="text-gray-300 text-lg mb-8 font-extralight leading-relaxed">
                      Our system analyzes the video and extracts text using advanced speech recognition technologies to
                      convert speech to text.
                    </p>
                  </div>
                  <div className="w-full md:w-1/2 order-2 md:order-1">
                    <div className="rounded-3xl overflow-hidden border border-white/10 shadow-2xl transform transition-transform duration-700 hover:scale-[1.02] group">
                      <img
                        src="/images/v0-logo.png"
                        alt="Video Processing"
                        className="w-full h-auto transition-all duration-700 group-hover:brightness-110"
                      />
                    </div>
                  </div>
                </div>

                <div className="flex flex-col md:flex-row gap-12 items-center">
                  <div className="w-full md:w-1/2">
                    <span className="inline-block text-sm font-medium text-gray-400 mb-3 tracking-wider">Step 03</span>
                    <h3 className="text-3xl font-light mb-6">Summary Creation</h3>
                    <p className="text-gray-300 text-lg mb-8 font-extralight leading-relaxed">
                      After extracting the text, AI analyzes it, identifies key points, and creates an accurate and
                      comprehensive summary.
                    </p>
                  </div>
                  <div className="w-full md:w-1/2">
                    <div className="rounded-3xl overflow-hidden border border-white/10 shadow-2xl transform transition-transform duration-700 hover:scale-[1.02] group">
                      <img
                        src="/images/v0-logo-square.jpeg"
                        alt="Summary Creation"
                        className="w-full h-auto transition-all duration-700 group-hover:brightness-110"
                      />
                    </div>
                  </div>
                </div>

                <div className="flex flex-col md:flex-row gap-12 items-center">
                  <div className="w-full md:w-1/2 order-1 md:order-2">
                    <span className="inline-block text-sm font-medium text-gray-400 mb-3 tracking-wider">Step 04</span>
                    <h3 className="text-3xl font-light mb-6">Receive Results</h3>
                    <p className="text-gray-300 text-lg mb-8 font-extralight leading-relaxed">
                      Get the video summary and full text in an easy-to-read format, with the ability to copy, download,
                      and share.
                    </p>
                  </div>
                  <div className="w-full md:w-1/2 order-2 md:order-1">
                    <div className="rounded-3xl overflow-hidden border border-white/10 shadow-2xl transform transition-transform duration-700 hover:scale-[1.02] group">
                      <img
                        src="/images/v0-search.png"
                        alt="Receive Results"
                        className="w-full h-auto transition-all duration-700 group-hover:brightness-110"
                      />
                    </div>
                  </div>
                </div>
              </div>
            </TracingBeam>
          </div>
        </div>
      </section>

      {/* Team Section */}
      <section className="py-32 bg-white">
        <div className="container mx-auto px-4 sm:px-6 lg:px-8 xl:px-12 2xl:px-16">
          <ScrollReveal>
            <div className="text-center mb-20">
              <span className="px-4 py-2 rounded-full bg-white shadow-[0_8px_30px_rgb(0,0,0,0.04)] border border-gray-100 text-sm font-medium tracking-wider inline-block mb-6">
                Our Team
              </span>
              <h2 className="text-5xl md:text-6xl font-extralight mb-6 tracking-tight">Meet the Experts</h2>
              <p className="text-xl text-gray-500 max-w-3xl mx-auto font-extralight">
                Elite experts in artificial intelligence and natural language processing
              </p>
            </div>
          </ScrollReveal>

          <div className="flex justify-center">
            <AnimatedTooltip items={team} />
          </div>
        </div>
      </section>

      {/* FAQ Section */}
      <section id="faq" className="py-32 bg-white relative overflow-hidden">
        <DotGrid />
        <div className="container mx-auto px-4 sm:px-6 lg:px-8 xl:px-12 2xl:px-16">
          <div className="text-center mb-20">
            <span className="px-4 py-2 rounded-full bg-white shadow-[0_8px_30px_rgb(0,0,0,0.04)] border border-gray-100 text-sm font-medium tracking-wider inline-block mb-6">
              FAQ
            </span>
            <h2 className="text-5xl md:text-6xl font-extralight mb-6 tracking-tight">Frequently Asked Questions</h2>
            <p className="text-xl text-gray-500 max-w-3xl mx-auto font-extralight">
              Answers to the most common questions about our services
            </p>
          </div>

          <div className="max-w-3xl mx-auto space-y-8">
            <FaqItem
              question="How does the video summarization service work?"
              answer="Our service uses advanced AI technologies to analyze video content and extract text from it, then identifies key points and creates an accurate summary containing essential information."
            />
            <FaqItem
              question="What types of videos are supported?"
              answer="Our service supports all public YouTube videos in both English and Arabic, including educational lectures, seminars, interviews, and presentations."
            />
            <FaqItem
              question="Can I download the summary and extracted text?"
              answer="Yes, our platform allows you to download summaries and full text in various formats such as PDF and TXT, and you can also copy content directly from the site."
            />
            <FaqItem
              question="Is the service free?"
              answer="We offer a free trial that allows you to summarize a limited number of videos monthly. For unlimited use, you can upgrade to the paid plan at competitive prices."
            />
            <FaqItem
              question="What languages are supported?"
              answer="Our platform currently fully supports English and Arabic, with partial support for other languages such as French and Spanish. We are continuously working to add more languages."
            />
          </div>
        </div>
      </section>

      {/* Results Section */}
      <div id="results">
        {videoData && (
          <section className="py-32 bg-white">
            <div className="container mx-auto px-4 sm:px-6 lg:px-8 xl:px-12 2xl:px-16">
              <ScrollReveal>
                <div className="max-w-5xl mx-auto">
                  <VideoSummaryCard videoData={videoData} isLoading={isLoading} />
                </div>
              </ScrollReveal>
            </div>
          </section>
        )}
      </div>

      {/* CTA Section */}
      <section className="py-32 bg-black text-white relative">
        <div className="absolute inset-0 bg-[radial-gradient(circle_at_center,rgba(255,255,255,0.1),transparent)]"></div>

        <div className="container mx-auto px-4 sm:px-6 lg:px-8 xl:px-12 2xl:px-16 relative z-10">
          <div className="max-w-4xl mx-auto text-center space-y-10">
            <h2 className="text-5xl md:text-6xl font-extralight tracking-tight leading-tight">
              Start Now and Leverage the <br />
              Power of AI
            </h2>
            <p className="text-xl text-gray-400 font-extralight tracking-wide">
              Join thousands of users who save time and effort using our platform
            </p>
            <div className="flex flex-col sm:flex-row justify-center gap-6 pt-8">
              <GlowingButton variant="white">
                Start Now for Free
                <ArrowRight className="ml-2 h-5 w-5 transition-transform duration-300 group-hover:translate-x-1" />
              </GlowingButton>

              <Button
                size="lg"
                variant="outline"
                className="border-gray-700 text-gray-300 hover:bg-gray-800 text-base py-7 px-10 rounded-full"
              >
                Contact Us
              </Button>
            </div>
          </div>
        </div>
      </section>

      {/* Footer */}
      <footer className="bg-white border-t border-gray-50 py-20">
        <div className="container mx-auto px-4 sm:px-6 lg:px-8 xl:px-12 2xl:px-16">
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-8 sm:gap-12 lg:gap-16">
            <div className="space-y-8">
              <Logo />
              <p className="text-gray-500 font-extralight tracking-wide leading-relaxed">
                An advanced platform for summarizing video clips using cutting-edge artificial intelligence technologies
              </p>
              <div className="flex gap-4">
                <Button
                  variant="outline"
                  size="icon"
                  className="rounded-full border-gray-100 bg-white text-gray-400 hover:text-black hover:border-black transition-all duration-300"
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="18"
                    height="18"
                    fill="currentColor"
                    viewBox="0 0 16 16"
                  >
                    <path d="M16 8.049c0-4.446-3.582-8.05-8-8.05C3.58 0-.002 3.603-.002 8.05c0 4.017 2.926 7.347 6.75 7.951v-5.625h-2.03V8.05H6.75V6.275c0-2.017 1.195-3.131 3.022-3.131.876 0 1.791.157 1.791.157v1.98h-1.009c-.993 0-1.303.621-1.303 1.258v1.51h2.218l-.354 2.326H9.25V16c3.824-.604 6.75-3.934 6.75-7.951z" />
                  </svg>
                </Button>
                <Button
                  variant="outline"
                  size="icon"
                  className="rounded-full border-gray-100 bg-white text-gray-400 hover:text-black hover:border-black transition-all duration-300"
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="18"
                    height="18"
                    fill="currentColor"
                    viewBox="0 0 16 16"
                  >
                    <path d="M5.026 15c6.038 0 9.341-5.003 9.341-9.334 0-.14 0-.282-.006-.422A6.685 6.685 0 0 0 16 3.542a6.658 6.658 0 0 1-1.889.518 3.301 3.301 0 0 0 1.447-1.817 6.533 6.533 0 0 1-2.087.793A3.286 3.286 0 0 0 7.875 6.03a9.325 9.325 0 0 1-6.767-3.429 3.289 3.289 0 0 0 1.018 4.382 3.323 3.323 0 0 1-.378.163h.02v.045a3.288 3.288 0 0 0 2.632 3.218c-.2.031-.42.048-.65.048a3.23 3.23 0 0 1-.614-.057 3.283 3.283 0 0 0 3.067 2.277 6.588 6.588 0 0 1-4.064 1.401A6.32 6.32 0 0 1 .78 13.58 9.344 9.344 0 0 0 5.026 15z" />
                  </svg>
                </Button>
                <Button
                  variant="outline"
                  size="icon"
                  className="rounded-full border-gray-100 bg-white text-gray-400 hover:text-black hover:border-black transition-all duration-300"
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="18"
                    height="18"
                    fill="currentColor"
                    viewBox="0 0 16 16"
                  >
                    <path d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.012 8.012 0 0 0 16 8c0-4.42-3.58-8-8-8z" />
                  </svg>
                </Button>
              </div>
            </div>

            <div>
              <h3 className="font-semibold text-lg mb-8 tracking-wide">Quick Links</h3>
              <ul className="space-y-6">
                <li>
                  <a
                    href="#hero"
                    className="text-gray-500 hover:text-black transition-all duration-300 font-extralight tracking-wide"
                  >
                    Home
                  </a>
                </li>
                <li>
                  <a
                    href="#features"
                    className="text-gray-500 hover:text-black transition-all duration-300 font-extralight tracking-wide"
                  >
                    Features
                  </a>
                </li>
                <li>
                  <a
                    href="#how-it-works"
                    className="text-gray-500 hover:text-black transition-all duration-300 font-extralight tracking-wide"
                  >
                    How It Works
                  </a>
                </li>
                <li>
                  <a
                    href="#faq"
                    className="text-gray-500 hover:text-black transition-all duration-300 font-extralight tracking-wide"
                  >
                    FAQ
                  </a>
                </li>
              </ul>
            </div>

            <div>
              <h3 className="font-semibold text-lg mb-8 tracking-wide">Company</h3>
              <ul className="space-y-6">
                <li>
                  <a
                    href="#"
                    className="text-gray-500 hover:text-black transition-all duration-300 font-extralight tracking-wide"
                  >
                    About Us
                  </a>
                </li>
                <li>
                  <a
                    href="#"
                    className="text-gray-500 hover:text-black transition-all duration-300 font-extralight tracking-wide"
                  >
                    Team
                  </a>
                </li>
                <li>
                  <a
                    href="#"
                    className="text-gray-500 hover:text-black transition-all duration-300 font-extralight tracking-wide"
                  >
                    Careers
                  </a>
                </li>
                <li>
                  <a
                    href="#"
                    className="text-gray-500 hover:text-black transition-all duration-300 font-extralight tracking-wide"
                  >
                    Contact Us
                  </a>
                </li>
              </ul>
            </div>

            <div>
              <h3 className="font-semibold text-lg mb-8 tracking-wide">Legal</h3>
              <ul className="space-y-6">
                <li>
                  <a
                    href="#"
                    className="text-gray-500 hover:text-black transition-all duration-300 font-extralight tracking-wide"
                  >
                    Privacy Policy
                  </a>
                </li>
                <li>
                  <a
                    href="#"
                    className="text-gray-500 hover:text-black transition-all duration-300 font-extralight tracking-wide"
                  >
                    Terms of Service
                  </a>
                </li>
                <li>
                  <a
                    href="#"
                    className="text-gray-500 hover:text-black transition-all duration-300 font-extralight tracking-wide"
                  >
                    Cookie Policy
                  </a>
                </li>
              </ul>
            </div>
          </div>

          <div className="border-t border-gray-50 mt-16 pt-10 flex flex-col md:flex-row justify-between items-center gap-4">
            <p className="text-gray-400 text-sm font-extralight">
              &copy; {new Date().getFullYear()} VideoSummary - All Rights Reserved
            </p>
            <p className="text-gray-400 text-sm font-extralight tracking-wide">Made with ❤️ in Saudi Arabia</p>
          </div>
        </div>
      </footer>
    </main>
  )
}

function FaqItem({ question, answer }) {
  const [isOpen, setIsOpen] = useState(false)

  return (
    <div className="border border-gray-50 rounded-3xl overflow-hidden bg-white hover:shadow-lg transition-all duration-500 group">
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="flex items-center justify-between w-full p-8 text-left"
      >
        <h3 className="text-xl font-light">{question}</h3>
        <div
          className={`h-10 w-10 rounded-full bg-white border border-gray-100 flex items-center justify-center transition-transform duration-500 ${
            isOpen ? "rotate-180" : ""
          } group-hover:border-gray-200`}
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="16"
            height="16"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            strokeWidth="2"
            strokeLinecap="round"
            strokeLinejoin="round"
          >
            <path d="m6 9 6 6 6-6" />
          </svg>
        </div>
      </button>

      <div
        className={`grid transition-all duration-500 ease-in-out ${
          isOpen ? "grid-rows-[1fr] opacity-100" : "grid-rows-[0fr] opacity-0"
        }`}
      >
        <div className="overflow-hidden">
          <div className="p-8 pt-0 text-gray-500 text-lg font-extralight leading-relaxed">{answer}</div>
        </div>
      </div>
    </div>
  )
}



===== app/video-fetcher.jsx =====
"use client"

import React, { useEffect, useState } from "react"

// A helper function to generate a random 20-character visitor ID
function generateVisitorId() {
  const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"
  let result = ""
  for (let i = 0; i < 20; i++) {
    result += chars.charAt(Math.floor(Math.random() * chars.length))
  }
  return result
}

export default function VideoFetcher() {
  const [userCookie, setUserCookie] = useState(null)
  const [videoData, setVideoData] = useState(null)
  const [loading, setLoading] = useState(false)

  // The video ID you want to fetch data for:
  const videoId = "IWczFdqUcWg"

  useEffect(() => {
    async function fetchData() {
      setLoading(true)
      try {
        // 1. POST user data to /users/cookies
        const visitorId = generateVisitorId()
        const userPayload = {
          user: {
            visitor_id: visitorId,
            ip: "127.0.0.1", // example IP
            country: "Saudi Arabia",
            device: "Desktop, Chrome", 
          },
        }

        const resCookies = await fetch("http://localhost:3000/users/cookies", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(userPayload),
        })

        if (!resCookies.ok) {
          throw new Error("Failed to send user data to /users/cookies")
        }

        const dataCookies = await resCookies.json()
        const cookieFromServer = dataCookies.cookie
        setUserCookie(cookieFromServer)

        // 2. Now GET /videos/:videoId using that cookie
        const resVideo = await fetch(`http://localhost:3000/videos/${videoId}`, {
          method: "GET",
          headers: {
            Cookie: `user_cookie=${cookieFromServer}`,
          },
        })

        if (!resVideo.ok) {
          throw new Error("Failed to fetch video data from /videos/:videoId")
        }

        const videoInfo = await resVideo.json()
        setVideoData(videoInfo)

      } catch (err) {
        console.error("Error:", err)
      } finally {
        setLoading(false)
      }
    }

    fetchData()
  }, [])

  if (loading) {
    return <div>Loading...</div>
  }

  if (!videoData) {
    return <div>No video data yet.</div>
  }

  // Once the data arrives, render it:
  return (
    <div style={{ marginTop: "2rem" }}>
      <h2>Video Information:</h2>
      <p><strong>Video ID:</strong> {videoData.video_id}</p>
      <p><strong>Title:</strong> {videoData.video_title}</p>
      <p><strong>Channel:</strong> {videoData.creator_channel}</p>
      <p><strong>Description:</strong> {videoData.description}</p>
      <p><strong>Words:</strong> {videoData.words}</p>
      <p><strong>Length (seconds):</strong> {videoData.video_length}</p>
      <p><strong>Publication Date:</strong> {videoData.publication_date}</p>

      {/* 
        If AI summary is available, you could display it here 
        e.g.: videoData.ai_summary_clean 
      */}
      {videoData.ai_summary_clean && (
        <div style={{ marginTop: "1rem" }}>
          <h4>AI Summary:</h4>
          <p>{videoData.ai_summary_clean}</p>
        </div>
      )}

      {/* 
        Similarly, if you have transcript data, you can render it here 
      */}
      {videoData.transcript_clean && (
        <div style={{ marginTop: "1rem" }}>
          <h4>Transcript:</h4>
          <p>{videoData.transcript_clean}</p>
        </div>
      )}
    </div>
  )
}



===== app/globals.css =====
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 0%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 0%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 0%;
    --primary: 0 0% 0%;
    --primary-foreground: 0 0% 100%;
    --secondary: 0 0% 96%;
    --secondary-foreground: 0 0% 0%;
    --muted: 0 0% 96%;
    --muted-foreground: 0 0% 45%;
    --accent: 0 0% 96%;
    --accent-foreground: 0 0% 0%;
    --destructive: 0 84% 60%;
    --destructive-foreground: 0 0% 100%;
    --border: 0 0% 90%;
    --input: 0 0% 90%;
    --ring: 0 0% 0%;
    --radius: 1.5rem;
  }

  .dark {
    --background: 0 0% 0%;
    --foreground: 0 0% 100%;
    --card: 0 0% 0%;
    --card-foreground: 0 0% 100%;
    --popover: 0 0% 0%;
    --popover-foreground: 0 0% 100%;
    --primary: 0 0% 100%;
    --primary-foreground: 0 0% 0%;
    --secondary: 0 0% 15%;
    --secondary-foreground: 0 0% 100%;
    --muted: 0 0% 15%;
    --muted-foreground: 0 0% 65%;
    --accent: 0 0% 15%;
    --accent-foreground: 0 0% 100%;
    --destructive: 0 62% 30%;
    --destructive-foreground: 0 0% 100%;
    --border: 0 0% 20%;
    --input: 0 0% 20%;
    --ring: 0 0% 100%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
    font-feature-settings: "rlig" 1, "calt" 1;
  }

  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    @apply tracking-tight;
  }
}

.custom-scrollbar::-webkit-scrollbar {
  width: 6px;
}

.custom-scrollbar::-webkit-scrollbar-track {
  background: rgba(255, 255, 255, 0.8);
  border-radius: 10px;
}

.custom-scrollbar::-webkit-scrollbar-thumb {
  background: rgba(0, 0, 0, 0.06);
  border-radius: 10px;
}

.custom-scrollbar::-webkit-scrollbar-thumb:hover {
  background: rgba(0, 0, 0, 0.1);
}

.animate-in {
  animation-duration: 0.5s;
  animation-timing-function: ease-out;
  animation-fill-mode: both;
}

.fade-in {
  animation-name: fadeIn;
}

.slide-in-from-bottom-4 {
  animation-name: slideInFromBottom;
}

@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes slideInFromBottom {
  from {
    transform: translateY(1rem);
    opacity: 0;
  }
  to {
    transform: translateY(0);
    opacity: 1;
  }
}

/* Utility for 3D perspective */
.perspective-1000 {
  perspective: 1000px;
}

/* Responsive styles for different devices */
/* Mobile devices */
@media (max-width: 640px) {
  html {
    font-size: 14px;
  }
}

/* Tablets */
@media (min-width: 641px) and (max-width: 1024px) {
  html {
    font-size: 16px;
  }
}

/* Desktops */
@media (min-width: 1025px) and (max-width: 1440px) {
  html {
    font-size: 16px;
  }
}

/* Large screens and TVs */
@media (min-width: 1441px) {
  html {
    font-size: 18px;
  }

  .container {
    max-width: 1920px;
  }
}

/* Ensure proper spacing on very large screens */
@media (min-width: 2000px) {
  .container {
    max-width: 2000px;
    margin-left: auto;
    margin-right: auto;
  }
}

/* Improve touch targets on mobile */
@media (max-width: 640px) {
  button,
  .button,
  a {
    min-height: 44px;
  }

  input,
  select,
  textarea {
    font-size: 16px; /* Prevents zoom on iOS */
  }
}




===== components/ui/dialog.jsx =====
"use client"

import React, { forwardRef } from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"
import { cn } from "@/lib/utils"

export const Dialog = DialogPrimitive.Root
export const DialogTrigger = DialogPrimitive.Trigger
export const DialogPortal = DialogPrimitive.Portal
export const DialogClose = DialogPrimitive.Close

export const DialogOverlay = forwardRef(function DialogOverlay(props, ref) {
  const { className, ...rest } = props
  return (
    <DialogPrimitive.Overlay
      ref={ref}
      className={cn(
        "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
        className
      )}
      {...rest}
    />
  )
})
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

export const DialogContent = forwardRef(function DialogContent(props, ref) {
  const { className, children, ...rest } = props
  return (
    <DialogPortal>
      <DialogOverlay />
      <DialogPrimitive.Content
        ref={ref}
        className={cn(
          "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200",
          "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
          "data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%]",
          "data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
          className
        )}
        {...rest}
      >
        {children}
        <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none">
          <X className="h-4 w-4" />
          <span className="sr-only">Close</span>
        </DialogPrimitive.Close>
      </DialogPrimitive.Content>
    </DialogPortal>
  )
})
DialogContent.displayName = DialogPrimitive.Content.displayName

export function DialogHeader({ className, ...props }) {
  return <div className={cn("flex flex-col space-y-1.5 text-center sm:text-left", className)} {...props} />
}
DialogHeader.displayName = "DialogHeader"

export function DialogFooter({ className, ...props }) {
  return (
    <div className={cn("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2", className)} {...props} />
  )
}
DialogFooter.displayName = "DialogFooter"

export const DialogTitle = forwardRef(function DialogTitle(props, ref) {
  const { className, ...rest } = props
  return (
    <DialogPrimitive.Title
      ref={ref}
      className={cn("text-lg font-semibold leading-none tracking-tight", className)}
      {...rest}
    />
  )
})
DialogTitle.displayName = DialogPrimitive.Title.displayName

export const DialogDescription = forwardRef(function DialogDescription(props, ref) {
  const { className, ...rest } = props
  return (
    <DialogPrimitive.Description
      ref={ref}
      className={cn("text-sm text-muted-foreground", className)}
      {...rest}
    />
  )
})
DialogDescription.displayName = DialogPrimitive.Description.displayName



===== components/ui/gradient-border.jsx =====
"use client"

import React, { useState } from "react"
import { cn } from "@/lib/utils"

export function GradientBorder({
  children,
  className,
  containerClassName,
  borderWidth = 1,
  gradientStart = "rgba(0,0,0,0.3)",
  gradientEnd = "rgba(0,0,0,0.1)",
}) {
  const [isHovered, setIsHovered] = useState(false)

  return (
    <div
      className={cn("relative inline-block group", containerClassName)}
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
    >
      <div
        className="absolute inset-0 rounded-full"
        style={{
          background: `linear-gradient(45deg, ${gradientStart}, ${gradientEnd})`,
          opacity: isHovered ? 1 : 0.5,
          transition: "opacity 0.5s ease",
        }}
      />
      <div
        className={cn("relative rounded-full overflow-hidden", className)}
        style={{
          padding: borderWidth,
        }}
      >
        {children}
      </div>
    </div>
  )
}



===== components/ui/menubar.jsx =====
"use client"

import React, { forwardRef } from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { Check, ChevronRight, Circle } from "lucide-react"
import { cn } from "@/lib/utils"

export const MenubarMenu = MenubarPrimitive.Menu
export const MenubarGroup = MenubarPrimitive.Group
export const MenubarPortal = MenubarPrimitive.Portal
export const MenubarSub = MenubarPrimitive.Sub
export const MenubarRadioGroup = MenubarPrimitive.RadioGroup

export const Menubar = forwardRef(function Menubar(props, ref) {
  const { className, ...rest } = props
  return (
    <MenubarPrimitive.Root
      ref={ref}
      className={cn("flex h-10 items-center space-x-1 rounded-md border bg-background p-1", className)}
      {...rest}
    />
  )
})
Menubar.displayName = MenubarPrimitive.Root.displayName

export const MenubarTrigger = forwardRef(function MenubarTrigger(props, ref) {
  const { className, ...rest } = props
  return (
    <MenubarPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium",
        "outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:text-accent-foreground",
        className
      )}
      {...rest}
    />
  )
})
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

export const MenubarSubTrigger = forwardRef(function MenubarSubTrigger(props, ref) {
  const { className, inset, children, ...rest } = props
  return (
    <MenubarPrimitive.SubTrigger
      ref={ref}
      className={cn(
        "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none",
        "focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
        inset && "pl-8",
        className
      )}
      {...rest}
    >
      {children}
      <ChevronRight className="ml-auto h-4 w-4" />
    </MenubarPrimitive.SubTrigger>
  )
})
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

export const MenubarSubContent = forwardRef(function MenubarSubContent(props, ref) {
  const { className, ...rest } = props
  return (
    <MenubarPrimitive.SubContent
      ref={ref}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md",
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0",
        "data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95",
        "data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2",
        "data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...rest}
    />
  )
})
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

export const MenubarContent = forwardRef(function MenubarContent(props, ref) {
  const { className, align = "start", alignOffset = -4, sideOffset = 8, ...rest } = props
  return (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md",
          "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0",
          "data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95",
          "data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2",
          "data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className
        )}
        {...rest}
      />
    </MenubarPrimitive.Portal>
  )
})
MenubarContent.displayName = MenubarPrimitive.Content.displayName

export const MenubarItem = forwardRef(function MenubarItem(props, ref) {
  const { className, inset, ...rest } = props
  return (
    <MenubarPrimitive.Item
      ref={ref}
      className={cn(
        "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none",
        "focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
        inset && "pl-8",
        className
      )}
      {...rest}
    />
  )
})
MenubarItem.displayName = MenubarPrimitive.Item.displayName

export const MenubarCheckboxItem = forwardRef(function MenubarCheckboxItem(
  { className, children, checked, ...rest },
  ref
) {
  return (
    <MenubarPrimitive.CheckboxItem
      ref={ref}
      className={cn(
        "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none",
        "focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
        className
      )}
      checked={checked}
      {...rest}
    >
      <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
        <MenubarPrimitive.ItemIndicator>
          <Check className="h-4 w-4" />
        </MenubarPrimitive.ItemIndicator>
      </span>
      {children}
    </MenubarPrimitive.CheckboxItem>
  )
})
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

export const MenubarRadioItem = forwardRef(function MenubarRadioItem({ className, children, ...rest }, ref) {
  return (
    <MenubarPrimitive.RadioItem
      ref={ref}
      className={cn(
        "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none",
        "focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
        className
      )}
      {...rest}
    >
      <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
        <MenubarPrimitive.ItemIndicator>
          <Circle className="h-2 w-2 fill-current" />
        </MenubarPrimitive.ItemIndicator>
      </span>
      {children}
    </MenubarPrimitive.RadioItem>
  )
})
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

export const MenubarLabel = forwardRef(function MenubarLabel({ className, inset, ...props }, ref) {
  return (
    <MenubarPrimitive.Label
      ref={ref}
      className={cn("px-2 py-1.5 text-sm font-semibold", inset && "pl-8", className)}
      {...props}
    />
  )
})
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

export const MenubarSeparator = forwardRef(function MenubarSeparator({ className, ...props }, ref) {
  return (
    <MenubarPrimitive.Separator
      ref={ref}
      className={cn("-mx-1 my-1 h-px bg-muted", className)}
      {...props}
    />
  )
})
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

export function MenubarShortcut({ className, ...props }) {
  return <span className={cn("ml-auto text-xs tracking-widest text-muted-foreground", className)} {...props} />
}
MenubarShortcut.displayName = "MenubarShortcut"



===== components/ui/3d-card.jsx =====
"use client"

import React, { useState, useRef } from "react"
import { motion, useSpring } from "framer-motion"
import { cn } from "@/lib/utils"

export function ThreeDCard({ children, className, containerClassName }) {
  const [rotateX, setRotateX] = useState(0)
  const [rotateY, setRotateY] = useState(0)
  const ref = useRef(null)

  const handleMouseMove = (e) => {
    if (!ref.current) return
    const rect = ref.current.getBoundingClientRect()

    const width = rect.width
    const height = rect.height

    const mouseX = (e.clientX - rect.left) / width - 0.5
    const mouseY = (e.clientY - rect.top) / height - 0.5

    const rotateXValue = mouseY * 10
    const rotateYValue = mouseX * -10

    setRotateX(rotateXValue)
    setRotateY(rotateYValue)
  }

  const handleMouseLeave = () => {
    setRotateX(0)
    setRotateY(0)
  }

  const springConfig = { damping: 20, stiffness: 150 }
  const springRotateX = useSpring(rotateX, springConfig)
  const springRotateY = useSpring(rotateY, springConfig)

  return (
    <div className={cn("perspective-1000", containerClassName)}>
      <motion.div
        ref={ref}
        onMouseMove={handleMouseMove}
        onMouseLeave={handleMouseLeave}
        style={{
          rotateX: springRotateX,
          rotateY: springRotateY,
          transformStyle: "preserve-3d",
        }}
        className={cn("w-full h-full transform transition-transform duration-300 ease-out", className)}
      >
        {children}
        <div
          className="absolute left-0 bottom-0 w-full h-[40px] bg-gradient-to-t from-white/30 to-transparent rounded-b-3xl transform-gpu rotate-x-90 translate-y-[20px] origin-bottom opacity-30 blur-sm"
          style={{
            transform: "rotateX(90deg) translateZ(-20px)",
          }}
        />
      </motion.div>
    </div>
  )
}



===== components/ui/avatar.jsx =====
"use client"

import React, { forwardRef } from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"
import { cn } from "@/lib/utils"

export const Avatar = forwardRef(function Avatar(props, ref) {
  const { className, ...rest } = props
  return (
    <AvatarPrimitive.Root
      ref={ref}
      className={cn("relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full", className)}
      {...rest}
    />
  )
})
Avatar.displayName = AvatarPrimitive.Root.displayName

export const AvatarImage = forwardRef(function AvatarImage(props, ref) {
  const { className, ...rest } = props
  return <AvatarPrimitive.Image ref={ref} className={cn("aspect-square h-full w-full", className)} {...rest} />
})
AvatarImage.displayName = AvatarPrimitive.Image.displayName

export const AvatarFallback = forwardRef(function AvatarFallback(props, ref) {
  const { className, ...rest } = props
  return (
    <AvatarPrimitive.Fallback
      ref={ref}
      className={cn("flex h-full w-full items-center justify-center rounded-full bg-muted", className)}
      {...rest}
    />
  )
})
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName



===== components/ui/feature-card.jsx =====
"use client"

import React, { useState } from "react"
import { motion } from "framer-motion"
import { cn } from "@/lib/utils"

export function FeatureCard({ title, description, icon, className }) {
  const [isHovered, setIsHovered] = useState(false)

  return (
    <motion.div
      className={cn(
        "relative rounded-3xl border border-gray-100 bg-white p-8 shadow-sm transition-all duration-500",
        isHovered && "shadow-md",
        className
      )}
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
      whileHover={{ y: -5 }}
      transition={{ duration: 0.3 }}
    >
      <div className="relative z-10">
        <div
          className={cn(
            "flex h-14 w-14 items-center justify-center rounded-2xl border border-gray-100 bg-white shadow-sm transition-all duration-300",
            isHovered && "scale-110"
          )}
        >
          {icon}
        </div>
        <h3 className="mt-6 text-xl font-medium text-black">{title}</h3>
        <p className="mt-3 text-gray-600 font-light leading-relaxed">{description}</p>
      </div>

      <div
        className={cn(
          "absolute inset-0 rounded-3xl bg-gradient-to-br from-gray-50 to-white opacity-0 transition-opacity duration-500",
          isHovered && "opacity-100"
        )}
      />
    </motion.div>
  )
}



===== components/ui/toggle-group.jsx =====
"use client"

import React, { forwardRef } from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
import { toggleVariants } from "@/components/ui/toggle"
import { cn } from "@/lib/utils"

const ToggleGroupContext = React.createContext({
  size: "default",
  variant: "default",
})

export const ToggleGroup = forwardRef(function ToggleGroup(props, ref) {
  const { className, variant, size, children, ...rest } = props
  return (
    <ToggleGroupPrimitive.Root ref={ref} className={cn("flex items-center justify-center gap-1", className)} {...rest}>
      <ToggleGroupContext.Provider value={{ variant, size }}>{children}</ToggleGroupContext.Provider>
    </ToggleGroupPrimitive.Root>
  )
})
ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName

export const ToggleGroupItem = forwardRef(function ToggleGroupItem(props, ref) {
  const { className, children, variant, size, ...rest } = props
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(toggleVariants({ variant: context.variant || variant, size: context.size || size }), className)}
      {...rest}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
})
ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName



===== components/ui/command.jsx =====
"use client"

import React, { forwardRef } from "react"
import { Dialog } from "@radix-ui/react-dialog"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"
import { cn } from "@/lib/utils"
import { DialogContent } from "@/components/ui/dialog"

export const Command = forwardRef(function Command(props, ref) {
  const { className, ...rest } = props
  return (
    <CommandPrimitive
      ref={ref}
      className={cn(
        "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
        className
      )}
      {...rest}
    />
  )
})
Command.displayName = CommandPrimitive.displayName

export function CommandDialog({ children, ...props }) {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

export const CommandInput = forwardRef(function CommandInput(props, ref) {
  const { className, ...rest } = props
  return (
    <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
      <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
      <CommandPrimitive.Input
        ref={ref}
        className={cn(
          "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        {...rest}
      />
    </div>
  )
})
CommandInput.displayName = CommandPrimitive.Input.displayName

export const CommandList = forwardRef(function CommandList(props, ref) {
  const { className, ...rest } = props
  return (
    <CommandPrimitive.List
      ref={ref}
      className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
      {...rest}
    />
  )
})
CommandList.displayName = CommandPrimitive.List.displayName

export const CommandEmpty = forwardRef(function CommandEmpty(props, ref) {
  return <CommandPrimitive.Empty ref={ref} className="py-6 text-center text-sm" {...props} />
})
CommandEmpty.displayName = CommandPrimitive.Empty.displayName

export const CommandGroup = forwardRef(function CommandGroup(props, ref) {
  const { className, ...rest } = props
  return (
    <CommandPrimitive.Group
      ref={ref}
      className={cn(
        "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
        className
      )}
      {...rest}
    />
  )
})
CommandGroup.displayName = CommandPrimitive.Group.displayName

export const CommandSeparator = forwardRef(function CommandSeparator(props, ref) {
  const { className, ...rest } = props
  return <CommandPrimitive.Separator ref={ref} className={cn("-mx-1 h-px bg-border", className)} {...rest} />
})
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

export const CommandItem = forwardRef(function CommandItem(props, ref) {
  const { className, ...rest } = props
  return (
    <CommandPrimitive.Item
      ref={ref}
      className={cn(
        "relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none",
        "data-[disabled=true]:pointer-events-none data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50",
        "[&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
        className
      )}
      {...rest}
    />
  )
})
CommandItem.displayName = CommandPrimitive.Item.displayName

export function CommandShortcut({ className, ...props }) {
  return <span className={cn("ml-auto text-xs tracking-widest text-muted-foreground", className)} {...props} />
}
CommandShortcut.displayName = "CommandShortcut"



===== components/ui/radio-group.jsx =====
"use client"

import React, { forwardRef } from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"
import { cn } from "@/lib/utils"

export const RadioGroup = forwardRef(function RadioGroup(props, ref) {
  const { className, ...rest } = props
  return (
    <RadioGroupPrimitive.Root ref={ref} className={cn("grid gap-2", className)} {...rest} />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

export const RadioGroupItem = forwardRef(function RadioGroupItem(props, ref) {
  const { className, ...rest } = props
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
        "disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...rest}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName



===== components/ui/breadcrumb.jsx =====
import React, { forwardRef } from "react"
import { Slot } from "@radix-ui/react-slot"
import { ChevronRight, MoreHorizontal } from "lucide-react"
import { cn } from "@/lib/utils"

export const Breadcrumb = forwardRef(function Breadcrumb(props, ref) {
  const { separator, ...rest } = props
  return <nav ref={ref} aria-label="breadcrumb" {...rest} />
})
Breadcrumb.displayName = "Breadcrumb"

export const BreadcrumbList = forwardRef(function BreadcrumbList(props, ref) {
  const { className, ...rest } = props
  return (
    <ol ref={ref} className={cn("flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5", className)} {...rest} />
  )
})
BreadcrumbList.displayName = "BreadcrumbList"

export const BreadcrumbItem = forwardRef(function BreadcrumbItem(props, ref) {
  const { className, ...rest } = props
  return <li ref={ref} className={cn("inline-flex items-center gap-1.5", className)} {...rest} />
})
BreadcrumbItem.displayName = "BreadcrumbItem"

export const BreadcrumbLink = forwardRef(function BreadcrumbLink(props, ref) {
  const { asChild, className, ...rest } = props
  const Comp = asChild ? Slot : "a"
  return <Comp ref={ref} className={cn("transition-colors hover:text-foreground", className)} {...rest} />
})
BreadcrumbLink.displayName = "BreadcrumbLink"

export const BreadcrumbPage = forwardRef(function BreadcrumbPage(props, ref) {
  const { className, ...rest } = props
  return <span ref={ref} role="link" aria-disabled="true" aria-current="page" className={cn("font-normal text-foreground", className)} {...rest} />
})
BreadcrumbPage.displayName = "BreadcrumbPage"

export function BreadcrumbSeparator({ children, className, ...props }) {
  return (
    <li
      role="presentation"
      aria-hidden="true"
      className={cn("[&>svg]:w-3.5 [&>svg]:h-3.5", className)}
      {...props}
    >
      {children ?? <ChevronRight />}
    </li>
  )
}
BreadcrumbSeparator.displayName = "BreadcrumbSeparator"

export function BreadcrumbEllipsis({ className, ...props }) {
  return (
    <span
      role="presentation"
      aria-hidden="true"
      className={cn("flex h-9 w-9 items-center justify-center", className)}
      {...props}
    >
      <MoreHorizontal className="h-4 w-4" />
      <span className="sr-only">More</span>
    </span>
  )
}
BreadcrumbEllipsis.displayName = "BreadcrumbEllipsis"



===== components/ui/text-generate-effect.jsx =====
"use client"
import React, { useEffect, useRef, useState } from "react"
import { cn } from "@/lib/utils"

export const TextGenerateEffect = ({ words, className }) => {
  const [displayedText, setDisplayedText] = useState("")
  const [currentIndex, setCurrentIndex] = useState(0)
  const [showCursor, setShowCursor] = useState(true)
  const intervalRef = useRef(null)

  useEffect(() => {
    if (currentIndex >= words.length) {
      if (intervalRef.current) {
        clearInterval(intervalRef.current)
        intervalRef.current = null
      }
      return
    }

    intervalRef.current = setInterval(() => {
      setDisplayedText((prev) => prev + words[currentIndex])
      setCurrentIndex((prev) => prev + 1)
    }, 30)

    return () => {
      if (intervalRef.current) {
        clearInterval(intervalRef.current)
        intervalRef.current = null
      }
    }
  }, [currentIndex, words])

  useEffect(() => {
    const cursorInterval = setInterval(() => {
      setShowCursor((prev) => !prev)
    }, 500)
    return () => clearInterval(cursorInterval)
  }, [])

  return (
    <div className={cn("", className)}>
      <p>
        {displayedText}
        {currentIndex < words.length && <span className={showCursor ? "opacity-100" : "opacity-0"}>|</span>}
      </p>
    </div>
  )
}



===== components/ui/calendar.jsx =====
"use client"

import React from "react"
import { ChevronLeft, ChevronRight } from "lucide-react"
import { DayPicker } from "react-day-picker"
import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

export function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell: "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative",
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: () => <ChevronLeft className="h-4 w-4" />,
        IconRight: () => <ChevronRight className="h-4 w-4" />,
      }}
      {...props}
    />
  )
}



===== components/ui/switch.jsx =====
"use client"

import React, { forwardRef } from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"
import { cn } from "@/lib/utils"

export const Switch = forwardRef(function Switch(props, ref) {
  const { className, ...rest } = props
  return (
    <SwitchPrimitives.Root
      ref={ref}
      className={cn(
        "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors",
        "focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
        "focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
        className
      )}
      {...rest}
    >
      <SwitchPrimitives.Thumb
        className={cn(
          "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform",
          "data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
        )}
      />
    </SwitchPrimitives.Root>
  )
})
Switch.displayName = SwitchPrimitives.Root.displayName



===== components/ui/scroll-reveal.jsx =====
"use client"

import React, { useEffect, useRef, useState } from "react"
import { motion, useAnimation } from "framer-motion"
import { cn } from "@/lib/utils"

export function ScrollReveal({
  children,
  className,
  threshold = 0.1,
  delay = 0,
  duration = 0.8,
  distance = 40,
  once = true,
}) {
  const controls = useAnimation()
  const ref = useRef(null)
  const [isVisible, setIsVisible] = useState(false)

  useEffect(() => {
    const observer = new IntersectionObserver(
      ([entry]) => {
        const isEntryIntersecting = entry.isIntersecting
        if (isEntryIntersecting && !isVisible) {
          setIsVisible(true)
          controls.start("visible")
        } else if (!isEntryIntersecting && !once) {
          setIsVisible(false)
          controls.start("hidden")
        }
      },
      { threshold }
    )

    const element = ref.current
    if (element) observer.observe(element)

    return () => {
      if (element) observer.unobserve(element)
    }
  }, [controls, isVisible, once, threshold])

  const variants = {
    hidden: { opacity: 0, y: distance },
    visible: {
      opacity: 1,
      y: 0,
      transition: {
        duration,
        delay,
        ease: [0.25, 0.1, 0.25, 1],
      },
    },
  }

  return (
    <motion.div ref={ref} initial="hidden" animate={controls} variants={variants} className={cn(className)}>
      {children}
    </motion.div>
  )
}



===== components/ui/carousel.jsx =====
"use client"

import React, { useCallback, useEffect, useRef, useState } from "react"
import useEmblaCarousel from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

export function Carousel({ opts, plugins, orientation = "horizontal", setApi, className, children, ...props }, ref) {
  const [carouselRef, api] = useEmblaCarousel(
    {
      ...opts,
      axis: orientation === "horizontal" ? "x" : "y",
    },
    plugins
  )
  const [canScrollPrev, setCanScrollPrev] = useState(false)
  const [canScrollNext, setCanScrollNext] = useState(false)

  const onSelect = useCallback((embla) => {
    if (!embla) return
    setCanScrollPrev(embla.canScrollPrev())
    setCanScrollNext(embla.canScrollNext())
  }, [])

  const scrollPrev = useCallback(() => {
    api?.scrollPrev()
  }, [api])

  const scrollNext = useCallback(() => {
    api?.scrollNext()
  }, [api])

  const handleKeyDown = useCallback((event) => {
    if (orientation === "horizontal") {
      if (event.key === "ArrowLeft") {
        event.preventDefault()
        scrollPrev()
      } else if (event.key === "ArrowRight") {
        event.preventDefault()
        scrollNext()
      }
    } else {
      if (event.key === "ArrowUp") {
        event.preventDefault()
        scrollPrev()
      } else if (event.key === "ArrowDown") {
        event.preventDefault()
        scrollNext()
      }
    }
  }, [scrollPrev, scrollNext, orientation])

  useEffect(() => {
    if (api && setApi) {
      setApi(api)
    }
  }, [api, setApi])

  useEffect(() => {
    if (!api) return
    onSelect(api)
    api.on("reInit", onSelect)
    api.on("select", onSelect)
    return () => {
      api.off("select", onSelect)
    }
  }, [api, onSelect])

  return (
    <div
      ref={ref}
      onKeyDownCapture={handleKeyDown}
      className={cn("relative", className)}
      role="region"
      aria-roledescription="carousel"
      {...props}
    >
      <CarouselContext.Provider
        value={{
          carouselRef,
          api,
          orientation,
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        {children}
      </CarouselContext.Provider>
    </div>
  )
}

export function CarouselContent({ className, children, ...props }) {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden" {...props}>
      <div className={cn(orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col", "flex", className)}>
        {children}
      </div>
    </div>
  )
}

export function CarouselItem({ className, children, ...props }) {
  const { orientation } = useCarousel()

  return (
    <div
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    >
      {children}
    </div>
  )
}

export function CarouselPrevious({ className, variant = "outline", size = "icon", ...props }) {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
}

export function CarouselNext({ className, variant = "outline", size = "icon", ...props }) {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
}

// سياق داخلي لمشاركة api.
const CarouselContext = React.createContext(null)

function useCarousel() {
  const ctx = React.useContext(CarouselContext)
  if (!ctx) throw new Error("useCarousel must be used within a CarouselContext")
  return ctx
}



===== components/ui/form.jsx =====
"use client"

import React, { createContext, useContext } from "react"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  FormProvider,
  useFormContext,
} from "react-hook-form"
import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

export const Form = FormProvider

const FormFieldContext = createContext({})

export function FormField({ name, ...props }) {
  return (
    <FormFieldContext.Provider value={{ name }}>
      <Controller name={name} {...props} />
    </FormFieldContext.Provider>
  )
}

export function useFormField() {
  const fieldContext = useContext(FormFieldContext)
  const itemContext = useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const fieldState = getFieldState(fieldContext.name, formState)
  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

const FormItemContext = createContext({})

export const FormItem = React.forwardRef(function FormItem(props, ref) {
  const { className, ...rest } = props
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...rest} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

export const FormLabel = React.forwardRef(function FormLabel(props, ref) {
  const { className, ...rest } = props
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...rest}
    />
  )
})
FormLabel.displayName = "FormLabel"

export const FormControl = React.forwardRef(function FormControl(props, ref) {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()
  const { ...rest } = props

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={!error ? formDescriptionId : `${formDescriptionId} ${formMessageId}`}
      aria-invalid={!!error}
      {...rest}
    />
  )
})
FormControl.displayName = "FormControl"

export const FormDescription = React.forwardRef(function FormDescription(props, ref) {
  const { className, ...rest } = props
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...rest}
    />
  )
})
FormDescription.displayName = "FormDescription"

export const FormMessage = React.forwardRef(function FormMessage(props, ref) {
  const { className, children, ...rest } = props
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) return null

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...rest}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"



===== components/ui/context-menu.jsx =====
"use client"

import React, { forwardRef } from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import { Check, ChevronRight, Circle } from "lucide-react"
import { cn } from "@/lib/utils"

export const ContextMenu = ContextMenuPrimitive.Root
export const ContextMenuTrigger = ContextMenuPrimitive.Trigger
export const ContextMenuGroup = ContextMenuPrimitive.Group
export const ContextMenuPortal = ContextMenuPrimitive.Portal
export const ContextMenuSub = ContextMenuPrimitive.Sub
export const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup

export const ContextMenuSubTrigger = forwardRef(function ContextMenuSubTrigger(
  { className, inset, children, ...props },
  ref
) {
  return (
    <ContextMenuPrimitive.SubTrigger
      ref={ref}
      className={cn(
        "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent",
        "data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
        inset && "pl-8",
        className
      )}
      {...props}
    >
      {children}
      <ChevronRight className="ml-auto h-4 w-4" />
    </ContextMenuPrimitive.SubTrigger>
  )
})
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName

export const ContextMenuSubContent = forwardRef(function ContextMenuSubContent(
  { className, ...props },
  ref
) {
  return (
    <ContextMenuPrimitive.SubContent
      ref={ref}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md",
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0",
        "data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95",
        "data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2",
        "data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  )
})
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName

export const ContextMenuContent = forwardRef(function ContextMenuContent(
  { className, ...props },
  ref
) {
  return (
    <ContextMenuPrimitive.Portal>
      <ContextMenuPrimitive.Content
        ref={ref}
        className={cn(
          "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in",
          "fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0",
          "data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95",
          "data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2",
          "data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className
        )}
        {...props}
      />
    </ContextMenuPrimitive.Portal>
  )
})
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName

export const ContextMenuItem = forwardRef(function ContextMenuItem(
  { className, inset, ...props },
  ref
) {
  return (
    <ContextMenuPrimitive.Item
      ref={ref}
      className={cn(
        "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none",
        "focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
        inset && "pl-8",
        className
      )}
      {...props}
    />
  )
})
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName

export const ContextMenuCheckboxItem = forwardRef(function ContextMenuCheckboxItem(
  { className, children, checked, ...props },
  ref
) {
  return (
    <ContextMenuPrimitive.CheckboxItem
      ref={ref}
      className={cn(
        "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none",
        "focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
        className
      )}
      checked={checked}
      {...props}
    >
      <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
        <ContextMenuPrimitive.ItemIndicator>
          <Check className="h-4 w-4" />
        </ContextMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </ContextMenuPrimitive.CheckboxItem>
  )
})
ContextMenuCheckboxItem.displayName = ContextMenuPrimitive.CheckboxItem.displayName

export const ContextMenuRadioItem = forwardRef(function ContextMenuRadioItem(
  { className, children, ...props },
  ref
) {
  return (
    <ContextMenuPrimitive.RadioItem
      ref={ref}
      className={cn(
        "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none",
        "focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
        className
      )}
      {...props}
    >
      <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
        <ContextMenuPrimitive.ItemIndicator>
          <Circle className="h-2 w-2 fill-current" />
        </ContextMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </ContextMenuPrimitive.RadioItem>
  )
})
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName

export const ContextMenuLabel = forwardRef(function ContextMenuLabel(
  { className, inset, ...props },
  ref
) {
  return (
    <ContextMenuPrimitive.Label
      ref={ref}
      className={cn("px-2 py-1.5 text-sm font-semibold text-foreground", inset && "pl-8", className)}
      {...props}
    />
  )
})
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName

export const ContextMenuSeparator = forwardRef(function ContextMenuSeparator(
  { className, ...props },
  ref
) {
  return (
    <ContextMenuPrimitive.Separator
      ref={ref}
      className={cn("-mx-1 my-1 h-px bg-border", className)}
      {...props}
    />
  )
})
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName

export function ContextMenuShortcut({ className, ...props }) {
  return (
    <span className={cn("ml-auto text-xs tracking-widest text-muted-foreground", className)} {...props} />
  )
}
ContextMenuShortcut.displayName = "ContextMenuShortcut"



===== components/ui/skeleton.jsx =====
import React from "react"
import { cn } from "@/lib/utils"

export function Skeleton({ className, ...props }) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}



===== components/ui/input.jsx =====
import React, { forwardRef } from "react"
import { cn } from "@/lib/utils"

export const Input = forwardRef(function Input(props, ref) {
  const { className, type, ...rest } = props
  return (
    <input
      ref={ref}
      type={type}
      className={cn(
        "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0",
        "file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground",
        "focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
        "disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      {...rest}
    />
  )
})
Input.displayName = "Input"



===== components/ui/textarea.jsx =====
import React, { forwardRef } from "react"
import { cn } from "@/lib/utils"

export const Textarea = forwardRef(function Textarea(props, ref) {
  const { className, ...rest } = props
  return (
    <textarea
      ref={ref}
      className={cn(
        "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground",
        "focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
        "disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      {...rest}
    />
  )
})
Textarea.displayName = "Textarea"



===== components/ui/select.jsx =====
"use client"

import React, { forwardRef } from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"
import { cn } from "@/lib/utils"

export const Select = SelectPrimitive.Root
export const SelectGroup = SelectPrimitive.Group
export const SelectValue = SelectPrimitive.Value

export const SelectTrigger = forwardRef(function SelectTrigger(
  { className, children, ...props },
  ref
) {
  return (
    <SelectPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground",
        "focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        "[&>span]:line-clamp-1",
        className
      )}
      {...props}
    >
      {children}
      <SelectPrimitive.Icon asChild>
        <ChevronDown className="h-4 w-4 opacity-50" />
      </SelectPrimitive.Icon>
    </SelectPrimitive.Trigger>
  )
})
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

export const SelectScrollUpButton = forwardRef(function SelectScrollUpButton(props, ref) {
  const { className, ...rest } = props
  return (
    <SelectPrimitive.ScrollUpButton
      ref={ref}
      className={cn("flex cursor-default items-center justify-center py-1", className)}
      {...rest}
    >
      <ChevronUp className="h-4 w-4" />
    </SelectPrimitive.ScrollUpButton>
  )
})
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

export const SelectScrollDownButton = forwardRef(function SelectScrollDownButton(props, ref) {
  const { className, ...rest } = props
  return (
    <SelectPrimitive.ScrollDownButton
      ref={ref}
      className={cn("flex cursor-default items-center justify-center py-1", className)}
      {...rest}
    >
      <ChevronDown className="h-4 w-4" />
    </SelectPrimitive.ScrollDownButton>
  )
})
SelectScrollDownButton.displayName = SelectPrimitive.ScrollDownButton.displayName

export const SelectContent = forwardRef(function SelectContent(
  { className, children, position = "popper", ...props },
  ref
) {
  return (
    <SelectPrimitive.Portal>
      <SelectPrimitive.Content
        ref={ref}
        position={position}
        className={cn(
          "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md",
          "data-[state=open]:animate-in data-[state=closed]:animate-out",
          "data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
          "data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95",
          "data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          position === "popper" &&
            "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
          className
        )}
        {...props}
      >
        <SelectScrollUpButton />
        <SelectPrimitive.Viewport
          className={cn(
            "p-1",
            position === "popper" &&
              "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
          )}
        >
          {children}
        </SelectPrimitive.Viewport>
        <SelectScrollDownButton />
      </SelectPrimitive.Content>
    </SelectPrimitive.Portal>
  )
})
SelectContent.displayName = SelectPrimitive.Content.displayName

export const SelectLabel = forwardRef(function SelectLabel(props, ref) {
  const { className, ...rest } = props
  return (
    <SelectPrimitive.Label
      ref={ref}
      className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
      {...rest}
    />
  )
})
SelectLabel.displayName = SelectPrimitive.Label.displayName

export const SelectItem = forwardRef(function SelectItem({ className, children, ...props }, ref) {
  return (
    <SelectPrimitive.Item
      ref={ref}
      className={cn(
        "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none",
        "focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
        className
      )}
      {...props}
    >
      <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
        <SelectPrimitive.ItemIndicator>
          <Check className="h-4 w-4" />
        </SelectPrimitive.ItemIndicator>
      </span>
      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
    </SelectPrimitive.Item>
  )
})
SelectItem.displayName = SelectPrimitive.Item.displayName

export const SelectSeparator = forwardRef(function SelectSeparator(props, ref) {
  const { className, ...rest } = props
  return (
    <SelectPrimitive.Separator
      ref={ref}
      className={cn("-mx-1 my-1 h-px bg-muted", className)}
      {...rest}
    />
  )
})
SelectSeparator.displayName = SelectPrimitive.Separator.displayName



===== components/ui/dropdown-menu.jsx =====
"use client"

import React, { forwardRef } from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"
import { cn } from "@/lib/utils"

export const DropdownMenu = DropdownMenuPrimitive.Root
export const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger
export const DropdownMenuGroup = DropdownMenuPrimitive.Group
export const DropdownMenuPortal = DropdownMenuPrimitive.Portal
export const DropdownMenuSub = DropdownMenuPrimitive.Sub
export const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

export const DropdownMenuSubTrigger = forwardRef(function DropdownMenuSubTrigger(
  { className, inset, children, ...props },
  ref
) {
  return (
    <DropdownMenuPrimitive.SubTrigger
      ref={ref}
      className={cn(
        "flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent",
        "data-[state=open]:bg-accent data-[state=open]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4",
        inset && "pl-8",
        className
      )}
      {...props}
    >
      {children}
      <ChevronRight className="ml-auto h-4 w-4" />
    </DropdownMenuPrimitive.SubTrigger>
  )
})
DropdownMenuSubTrigger.displayName = DropdownMenuPrimitive.SubTrigger.displayName

export const DropdownMenuSubContent = forwardRef(function DropdownMenuSubContent(
  { className, ...props },
  ref
) {
  return (
    <DropdownMenuPrimitive.SubContent
      ref={ref}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md",
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0",
        "data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95",
        "data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2",
        "data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  )
})
DropdownMenuSubContent.displayName = DropdownMenuPrimitive.SubContent.displayName

export const DropdownMenuContent = forwardRef(function DropdownMenuContent(
  { className, sideOffset = 4, ...props },
  ref
) {
  return (
    <DropdownMenuPrimitive.Portal>
      <DropdownMenuPrimitive.Content
        ref={ref}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md",
          "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0",
          "data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95",
          "data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2",
          "data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className
        )}
        {...props}
      />
    </DropdownMenuPrimitive.Portal>
  )
})
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

export const DropdownMenuItem = forwardRef(function DropdownMenuItem(
  { className, inset, ...props },
  ref
) {
  return (
    <DropdownMenuPrimitive.Item
      ref={ref}
      className={cn(
        "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors",
        "focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
        "[&_svg]:pointer-events-none [&_svg]:size-4",
        inset && "pl-8",
        className
      )}
      {...props}
    />
  )
})
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

export const DropdownMenuCheckboxItem = forwardRef(function DropdownMenuCheckboxItem(
  { className, children, checked, ...props },
  ref
) {
  return (
    <DropdownMenuPrimitive.CheckboxItem
      ref={ref}
      className={cn(
        "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none",
        "focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
        className
      )}
      checked={checked}
      {...props}
    >
      <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          <Check className="h-4 w-4" />
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.CheckboxItem>
  )
})
DropdownMenuCheckboxItem.displayName = DropdownMenuPrimitive.CheckboxItem.displayName

export const DropdownMenuRadioItem = forwardRef(function DropdownMenuRadioItem(
  { className, children, ...props },
  ref
) {
  return (
    <DropdownMenuPrimitive.RadioItem
      ref={ref}
      className={cn(
        "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none",
        "focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
        className
      )}
      {...props}
    >
      <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          <Circle className="h-2 w-2 fill-current" />
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.RadioItem>
  )
})
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

export const DropdownMenuLabel = forwardRef(function DropdownMenuLabel(
  { className, inset, ...props },
  ref
) {
  return (
    <DropdownMenuPrimitive.Label
      ref={ref}
      className={cn("px-2 py-1.5 text-sm font-semibold", inset && "pl-8", className)}
      {...props}
    />
  )
})
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

export const DropdownMenuSeparator = forwardRef(function DropdownMenuSeparator(
  { className, ...props },
  ref
) {
  return (
    <DropdownMenuPrimitive.Separator
      ref={ref}
      className={cn("-mx-1 my-1 h-px bg-muted", className)}
      {...props}
    />
  )
})
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

export function DropdownMenuShortcut({ className, ...props }) {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"



===== components/ui/collapsible.jsx =====
"use client"

import * as React from "react"
import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

export const Collapsible = CollapsiblePrimitive.Root
export const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger
export const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent



===== components/ui/checkbox.jsx =====
"use client"

import React, { forwardRef } from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"
import { cn } from "@/lib/utils"

export const Checkbox = forwardRef(function Checkbox(props, ref) {
  const { className, ...rest } = props
  return (
    <CheckboxPrimitive.Root
      ref={ref}
      className={cn(
        "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background",
        "focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
        "disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
        className
      )}
      {...rest}
    >
      <CheckboxPrimitive.Indicator className="flex items-center justify-center text-current">
        <Check className="h-4 w-4" />
      </CheckboxPrimitive.Indicator>
    </CheckboxPrimitive.Root>
  )
})
Checkbox.displayName = CheckboxPrimitive.Root.displayName



===== components/ui/toast.jsx =====
"use client"

import React, { forwardRef } from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva } from "class-variance-authority"
import { X } from "lucide-react"
import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = forwardRef(function ToastViewport(props, ref) {
  const { className, ...rest } = props
  return (
    <ToastPrimitives.Viewport
      ref={ref}
      className={cn(
        "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
        className
      )}
      {...rest}
    />
  )
})
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = forwardRef(function Toast(props, ref) {
  const { className, variant, ...rest } = props
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...rest}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = forwardRef(function ToastAction(props, ref) {
  const { className, ...rest } = props
  return (
    <ToastPrimitives.Action
      ref={ref}
      className={cn(
        "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium",
        "ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2",
        "group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive",
        "group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
        className
      )}
      {...rest}
    />
  )
})
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = forwardRef(function ToastClose(props, ref) {
  const { className, ...rest } = props
  return (
    <ToastPrimitives.Close
      ref={ref}
      className={cn(
        "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity",
        "hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300",
        "group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
        className
      )}
      toast-close=""
      {...rest}
    >
      <X className="h-4 w-4" />
    </ToastPrimitives.Close>
  )
})
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = forwardRef(function ToastTitle(props, ref) {
  const { className, ...rest } = props
  return (
    <ToastPrimitives.Title
      ref={ref}
      className={cn("text-sm font-semibold", className)}
      {...rest}
    />
  )
})
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = forwardRef(function ToastDescription(props, ref) {
  const { className, ...rest } = props
  return (
    <ToastPrimitives.Description
      ref={ref}
      className={cn("text-sm opacity-90", className)}
      {...rest}
    />
  )
})
ToastDescription.displayName = ToastPrimitives.Description.displayName

export {
  ToastProvider,
  ToastViewport,
  Toast,
  ToastAction,
  ToastClose,
  ToastTitle,
  ToastDescription,
}



===== components/ui/glowing-button.jsx =====
"use client"

import React, { useState } from "react"
import { cn } from "@/lib/utils"

export function GlowingButton({
  children,
  className,
  containerClassName,
  variant = "black",
  ...props
}) {
  const [hovered, setHovered] = useState(false)

  const baseStyles = "relative z-0 group overflow-hidden rounded-full"
  const blackVariantStyles = "bg-black text-white hover:bg-gray-900"
  const whiteVariantStyles = "bg-white text-black hover:bg-gray-50"

  return (
    <div
      className={cn("rounded-full p-[1px] overflow-hidden", containerClassName)}
      style={{
        background: hovered
          ? variant === "black"
            ? "linear-gradient(to right, rgb(200, 200, 200), rgb(30, 30, 30), rgb(200, 200, 200))"
            : "linear-gradient(to right, rgb(30, 30, 30), rgb(200, 200, 200), rgb(30, 30, 30))"
          : "transparent",
        transition: "all 0.5s ease",
      }}
      onMouseEnter={() => setHovered(true)}
      onMouseLeave={() => setHovered(false)}
    >
      <button
        className={cn(
          baseStyles,
          variant === "black" ? blackVariantStyles : whiteVariantStyles,
          "text-base font-normal py-7 px-10 flex items-center transition-all duration-500",
          className
        )}
        {...props}
      >
        {children}
        <div
          className={cn(
            "absolute inset-0 h-full w-full bg-gradient-to-r opacity-0 group-hover:opacity-100 blur-xl transition-all duration-500",
            variant === "black"
              ? "from-gray-900 via-gray-100 to-gray-900"
              : "from-gray-100 via-gray-900 to-gray-100"
          )}
        />
      </button>
    </div>
  )
}



===== components/ui/toggle.jsx =====
"use client"

import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-10 px-3 min-w-10",
        sm: "h-9 px-2.5 min-w-9",
        lg: "h-11 px-5 min-w-11",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }



===== components/ui/button.jsx =====
import React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva } from "class-variance-authority"
import { cn } from "@/lib/utils"

/**
 * تعريف الـ cva (class variance authority) للستايلات:
 * نحدد المتغيرات (variants) مثل: variant=default, destructive, outline... و size=default, sm, lg, ...
 */
const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium " +
    "ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 " +
    "focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 " +
    "[&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive: "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary: "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

/**
 * مكوّن Button عادي يدعم الاختيارات (variant, size)، بالإضافة لخيار asChild:
 *  - asChild=true => يلف محتواه بـ <Slot> (لاستعماله مع مكتبات أخرى مثل Radix Slot)
 */
export function Button({
  asChild = false,
  variant = "default",
  size = "default",
  className,
  ...props
}) {
  const Comp = asChild ? Slot : "button"
  return (
    <Comp className={cn(buttonVariants({ variant, size }), className)} {...props} />
  )
}

/**
 * يمكن تصدير الـ buttonVariants إن احتجت استعماله بمكان آخر:
 */
export { buttonVariants }



===== components/ui/separator.jsx =====
"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }



===== components/ui/table.jsx =====
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}



===== components/ui/sidebar.jsx =====
"use client"

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { VariantProps, cva } from "class-variance-authority"
import { PanelLeft } from "lucide-react"

import { useIsMobile } from "@/hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import { Sheet, SheetContent } from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar:state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

type SidebarContext = {
  state: "expanded" | "collapsed"
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContext | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean
    open?: boolean
    onOpenChange?: (open: boolean) => void
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile()
    const [openMobile, setOpenMobile] = React.useState(false)

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen)
    const open = openProp ?? _open
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        const openState = typeof value === "function" ? value(open) : value
        if (setOpenProp) {
          setOpenProp(openState)
        } else {
          _setOpen(openState)
        }

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
      },
      [setOpenProp, open]
    )

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open)
    }, [isMobile, setOpen, setOpenMobile])

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault()
          toggleSidebar()
        }
      }

      window.addEventListener("keydown", handleKeyDown)
      return () => window.removeEventListener("keydown", handleKeyDown)
    }, [toggleSidebar])

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed"

    const contextValue = React.useMemo<SidebarContext>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    )

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    )
  }
)
SidebarProvider.displayName = "SidebarProvider"

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right"
    variant?: "sidebar" | "floating" | "inset"
    collapsible?: "offcanvas" | "icon" | "none"
  }
>(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      )
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              } as React.CSSProperties
            }
            side={side}
          >
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      )
    }

    return (
      <div
        ref={ref}
        className="group peer hidden md:block text-sidebar-foreground"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
          )}
        />
        <div
          className={cn(
            "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    )
  }
)
Sidebar.displayName = "Sidebar"

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button">
>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  )
})
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"main">
>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex min-h-svh flex-1 flex-col bg-background",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  )
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className
      )}
      {...props}
    />
  )
})
SidebarInput.displayName = "SidebarInput"

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarFooter.displayName = "SidebarFooter"

const SidebarSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props}
    />
  )
})
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarContent.displayName = "SidebarContent"

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    isActive?: boolean
    tooltip?: string | React.ComponentProps<typeof TooltipContent>
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button"
    const { isMobile, state } = useSidebar()

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    )

    if (!tooltip) {
      return button
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      }
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    )
  }
)
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    showOnHover?: boolean
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 flex-1 max-w-[--skeleton-width]"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  )
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ ...props }, ref) => <li ref={ref} {...props} />)
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean
    size?: "sm" | "md"
    isActive?: boolean
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}



===== components/ui/use-toast.ts =====
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }



===== components/ui/badge.jsx =====
import React from "react"
import { cva } from "class-variance-authority"
import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default: "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary: "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive: "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export function Badge({ className, variant, ...props }) {
  return <div className={cn(badgeVariants({ variant }), className)} {...props} />
}



===== components/ui/spotlight.jsx =====
"use client"

import React, { useRef, useState, useEffect } from "react"
import { motion } from "framer-motion"
import { cn } from "@/lib/utils"

export function Spotlight({ className, fill = "white" }) {
  const divRef = useRef(null)
  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 })
  const [isHovered, setIsHovered] = useState(false)

  useEffect(() => {
    const handleMouseMove = (event) => {
      if (divRef.current) {
        const div = divRef.current
        const rect = div.getBoundingClientRect()
        setMousePosition({
          x: event.clientX - rect.left,
          y: event.clientY - rect.top,
        })
      }
    }
    window.addEventListener("mousemove", handleMouseMove)
    return () => window.removeEventListener("mousemove", handleMouseMove)
  }, [])

  return (
    <motion.div
      ref={divRef}
      className={cn("pointer-events-none absolute z-0 h-[50vh] w-[40vw] opacity-30", className)}
      animate={{
        opacity: isHovered ? 0.5 : 0.12,
      }}
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
    >
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 880 880" fill="none" className="h-full w-full">
        <motion.g
          animate={{ x: mousePosition.x - 440, y: mousePosition.y - 440, scale: isHovered ? 1.1 : 1 }}
        >
          <motion.circle
            animate={{ scale: [0.95, 1.05, 0.95] }}
            transition={{
              repeat: Infinity,
              duration: 6,
              ease: "easeInOut",
            }}
            cx="440"
            cy="440"
            r="230"
            fill={fill}
            fillOpacity="0.1"
          />
          <motion.circle
            animate={{ scale: [0.9, 1.1, 0.9] }}
            transition={{
              repeat: Infinity,
              duration: 8,
              ease: "easeInOut",
            }}
            cx="440"
            cy="440"
            r="340"
            fill={fill}
            fillOpacity="0.05"
          />
          <motion.circle
            animate={{ scale: [0.85, 1.15, 0.85] }}
            transition={{
              repeat: Infinity,
              duration: 10,
              ease: "easeInOut",
            }}
            cx="440"
            cy="440"
            r="440"
            fill={fill}
            fillOpacity="0.025"
          />
        </motion.g>
      </svg>
    </motion.div>
  )
}



===== components/ui/input-otp.jsx =====
"use client"

import React from "react"
import { OTPInput, OTPInputContext } from "input-otp"
import { Dot } from "lucide-react"
import { cn } from "@/lib/utils"

const InputOTP = React.forwardRef((props, ref) => {
  const { className, containerClassName, ...rest } = props
  return (
    <OTPInput
      ref={ref}
      containerClassName={cn("flex items-center gap-2 has-[:disabled]:opacity-50", containerClassName)}
      className={cn("disabled:cursor-not-allowed", className)}
      {...rest}
    />
  )
})
InputOTP.displayName = "InputOTP"

const InputOTPGroup = React.forwardRef((props, ref) => {
  const { className, ...rest } = props
  return <div ref={ref} className={cn("flex items-center", className)} {...rest} />
})
InputOTPGroup.displayName = "InputOTPGroup"

const InputOTPSlot = React.forwardRef((props, ref) => {
  const { index, className, ...rest } = props
  const inputOTPContext = React.useContext(OTPInputContext)
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]

  return (
    <div
      ref={ref}
      className={cn(
        "relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
        isActive && "z-10 ring-2 ring-ring ring-offset-background",
        className
      )}
      {...rest}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
        </div>
      )}
    </div>
  )
})
InputOTPSlot.displayName = "InputOTPSlot"

const InputOTPSeparator = React.forwardRef((props, ref) => {
  return (
    <div ref={ref} role="separator" {...props}>
      <Dot />
    </div>
  )
})
InputOTPSeparator.displayName = "InputOTPSeparator"

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }



===== components/ui/background-gradient.jsx =====
"use client"
import React, { useRef, useState, useEffect } from "react"
import { motion } from "framer-motion"
import { cn } from "@/lib/utils"

export const BackgroundGradient = ({
  children,
  className,
  containerClassName,
  animate = true,
}) => {
  const wrapperRef = useRef(null)
  const [position, setPosition] = useState({ x: 0, y: 0 })
  const [opacity, setOpacity] = useState(0)

  const updateMousePosition = (ev) => {
    if (!wrapperRef.current) return
    const rect = wrapperRef.current.getBoundingClientRect()
    setPosition({
      x: ev.clientX - rect.left,
      y: ev.clientY - rect.top,
    })
  }

  const handleMouseEnter = () => {
    setOpacity(1)
  }

  const handleMouseLeave = () => {
    setOpacity(0)
  }

  useEffect(() => {
    if (!animate) return
    window.addEventListener("mousemove", updateMousePosition)
    window.addEventListener("mouseenter", handleMouseEnter)
    window.addEventListener("mouseleave", handleMouseLeave)

    return () => {
      window.removeEventListener("mousemove", updateMousePosition)
      window.removeEventListener("mouseenter", handleMouseEnter)
      window.removeEventListener("mouseleave", handleMouseLeave)
    }
  }, [animate])

  return (
    <div ref={wrapperRef} className={cn("relative overflow-hidden", containerClassName)}>
      {animate && (
        <motion.div
          className="absolute inset-0 z-0 bg-white opacity-20 pointer-events-none"
          animate={{
            background: [
              `radial-gradient(800px circle at ${position.x}px ${position.y}px, rgba(0,0,0,0.06), transparent 40%)`,
              `radial-gradient(600px circle at ${position.x}px ${position.y}px, rgba(0,0,0,0.04), transparent 40%)`,
              `radial-gradient(800px circle at ${position.x}px ${position.y}px, rgba(0,0,0,0.02), transparent 40%)`,
            ],
            opacity: opacity,
          }}
          transition={{
            duration: 0.5,
            ease: "easeOut",
          }}
        />
      )}
      <div className={cn("relative z-10", className)}>{children}</div>
    </div>
  )
}



===== components/ui/toaster.jsx =====
"use client"

import React from "react"
import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && <ToastDescription>{description}</ToastDescription>}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}



===== components/ui/progress.jsx =====
"use client"

import React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"
import { cn } from "@/lib/utils"

export const Progress = React.forwardRef((props, ref) => {
  const { className, value, ...rest } = props
  return (
    <ProgressPrimitive.Root
      ref={ref}
      className={cn("relative h-4 w-full overflow-hidden rounded-full bg-secondary", className)}
      {...rest}
    >
      <ProgressPrimitive.Indicator
        className="h-full w-full flex-1 bg-primary transition-all"
        style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
      />
    </ProgressPrimitive.Root>
  )
})
Progress.displayName = ProgressPrimitive.Root.displayName



===== components/ui/animated-tooltip.jsx =====
"use client"
import React, { useState } from "react"
import { motion } from "framer-motion"

export const AnimatedTooltip = ({ items }) => {
  return (
    <div className="flex flex-row items-center justify-center gap-4">
      {items.map((item) => (
        <TooltipComponent key={item.id} item={item} />
      ))}
    </div>
  )
}

const TooltipComponent = ({ item }) => {
  const [isHovered, setIsHovered] = useState(false)

  return (
    <div className="group relative" onMouseEnter={() => setIsHovered(true)} onMouseLeave={() => setIsHovered(false)}>
      <motion.div
        initial={{ opacity: 0, y: 20, scale: 0.6 }}
        animate={{
          opacity: isHovered ? 1 : 0,
          y: isHovered ? 0 : 20,
          scale: isHovered ? 1 : 0.6,
        }}
        transition={{ duration: 0.3, ease: "easeOut" }}
        style={{ translateX: "-50%" }}
        className="absolute bottom-full left-1/2 z-50 mb-3 rounded-xl bg-white p-4 shadow-xl border border-gray-100"
      >
        <div className="flex flex-col items-center gap-2">
          <p className="whitespace-nowrap text-center text-lg font-bold text-black">{item.name}</p>
          <p className="whitespace-nowrap text-center text-sm text-gray-600">{item.designation}</p>
        </div>
        <div
          className="absolute left-1/2 top-full h-4 w-4 -translate-x-1/2 -translate-y-1/2 rotate-45 bg-white"
          style={{
            boxShadow: "0 0 0 1px rgba(0, 0, 0, 0.05)",
          }}
        ></div>
      </motion.div>
      <div className="relative h-24 w-24 rounded-full border-2 border-gray-100 p-1 transition-all duration-300 group-hover:border-gray-300">
        <div className="absolute inset-0 rounded-full bg-gradient-to-br from-gray-100 to-gray-200 opacity-0 blur-xl transition-opacity duration-300 group-hover:opacity-30"></div>
        <img
          src={item.image || "/placeholder.svg"}
          alt={item.name}
          className="h-full w-full rounded-full object-cover"
        />
      </div>
    </div>
  )
}



===== components/ui/popover.jsx =====
"use client"

import React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"
import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root
const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef((props, ref) => {
  const { className, align = "center", sideOffset = 4, ...rest } = props
  return (
    <PopoverPrimitive.Portal>
      <PopoverPrimitive.Content
        ref={ref}
        align={align}
        sideOffset={sideOffset}
        className={cn(
          "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in",
          "data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95",
          "data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2",
          "data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className
        )}
        {...rest}
      />
    </PopoverPrimitive.Portal>
  )
})
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }



===== components/ui/slider.jsx =====
"use client"

import React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"
import { cn } from "@/lib/utils"

export const Slider = React.forwardRef((props, ref) => {
  const { className, ...rest } = props
  return (
    <SliderPrimitive.Root
      ref={ref}
      className={cn(
        "relative flex w-full touch-none select-none items-center",
        className
      )}
      {...rest}
    >
      <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
        <SliderPrimitive.Range className="absolute h-full bg-primary" />
      </SliderPrimitive.Track>
      <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
    </SliderPrimitive.Root>
  )
})
Slider.displayName = SliderPrimitive.Root.displayName



===== components/ui/card.jsx =====
import React from "react"
import { cn } from "@/lib/utils"

const Card = React.forwardRef((props, ref) => {
  const { className, ...rest } = props
  return (
    <div
      ref={ref}
      className={cn("rounded-lg border bg-card text-card-foreground shadow-sm", className)}
      {...rest}
    />
  )
})
Card.displayName = "Card"

const CardHeader = React.forwardRef((props, ref) => {
  const { className, ...rest } = props
  return <div ref={ref} className={cn("flex flex-col space-y-1.5 p-6", className)} {...rest} />
})
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef((props, ref) => {
  const { className, ...rest } = props
  return <div ref={ref} className={cn("text-2xl font-semibold leading-none tracking-tight", className)} {...rest} />
})
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef((props, ref) => {
  const { className, ...rest } = props
  return <div ref={ref} className={cn("text-sm text-muted-foreground", className)} {...rest} />
})
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef((props, ref) => {
  const { className, ...rest } = props
  return <div ref={ref} className={cn("p-6 pt-0", className)} {...rest} />
})
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef((props, ref) => {
  const { className, ...rest } = props
  return <div ref={ref} className={cn("flex items-center p-6 pt-0", className)} {...rest} />
})
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }



===== components/ui/background-beams.jsx =====
"use client"
import React, { useEffect, useRef, useState } from "react"
import { cn } from "@/lib/utils"

export const BackgroundBeams = ({ className }) => {
  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 })
  const ref = useRef(null)

  useEffect(() => {
    const handleMouseMove = (event) => {
      if (ref.current) {
        const rect = ref.current.getBoundingClientRect()
        setMousePosition({
          x: event.clientX - rect.left,
          y: event.clientY - rect.top,
        })
      }
    }

    const element = ref.current
    if (element) {
      element.addEventListener("mousemove", handleMouseMove)
    }

    return () => {
      if (element) {
        element.removeEventListener("mousemove", handleMouseMove)
      }
    }
  }, [])

  return (
    <div
      ref={ref}
      className={cn("h-full w-full overflow-hidden [--x:50%] [--y:50%]", className)}
      style={{
        "--x": `${mousePosition.x}px`,
        "--y": `${mousePosition.y}px`,
      }}
    >
      <div className="relative h-full w-full">
        <div
          className="pointer-events-none absolute inset-0 z-0 h-full w-full bg-white [mask-image:radial-gradient(100%_100%_at_var(--x)_var(--y),transparent_30%,black)]"
          aria-hidden="true"
        />
        <div
          className="pointer-events-none absolute inset-0 z-10 h-full w-full bg-[radial-gradient(circle_at_var(--x)_var(--y),rgba(0,0,0,0.15)_10%,transparent_80%)]"
          aria-hidden="true"
        />
      </div>
    </div>
  )
}



===== components/ui/tabs.jsx =====
"use client"

import React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"
import { cn } from "@/lib/utils"

export const Tabs = TabsPrimitive.Root

export const TabsList = React.forwardRef((props, ref) => {
  const { className, ...rest } = props
  return (
    <TabsPrimitive.List
      ref={ref}
      className={cn(
        "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
        className
      )}
      {...rest}
    />
  )
})
TabsList.displayName = TabsPrimitive.List.displayName

export const TabsTrigger = React.forwardRef((props, ref) => {
  const { className, ...rest } = props
  return (
    <TabsPrimitive.Trigger
      ref={ref}
      className={cn(
        "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium",
        "ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring",
        "focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
        "data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
        className
      )}
      {...rest}
    />
  )
})
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

export const TabsContent = React.forwardRef((props, ref) => {
  const { className, ...rest } = props
  return (
    <TabsPrimitive.Content
      ref={ref}
      className={cn(
        "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
        className
      )}
      {...rest}
    />
  )
})
TabsContent.displayName = TabsPrimitive.Content.displayName



===== components/ui/pagination.jsx =====
import React from "react"
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

export function Pagination({ className, ...props }) {
  return (
    <nav
      role="navigation"
      aria-label="pagination"
      className={cn("mx-auto flex w-full justify-center", className)}
      {...props}
    />
  )
}

Pagination.displayName = "Pagination"

export const PaginationContent = React.forwardRef((props, ref) => {
  const { className, ...rest } = props
  return <ul ref={ref} className={cn("flex flex-row items-center gap-1", className)} {...rest} />
})
PaginationContent.displayName = "PaginationContent"

export const PaginationItem = React.forwardRef((props, ref) => {
  const { className, ...rest } = props
  return <li ref={ref} className={cn("", className)} {...rest} />
})
PaginationItem.displayName = "PaginationItem"

export function PaginationLink({
  isActive,
  size = "icon",
  className,
  ...props
}) {
  return (
    <a
      aria-current={isActive ? "page" : undefined}
      className={cn(
        buttonVariants({
          variant: isActive ? "outline" : "ghost",
          size,
        }),
        className
      )}
      {...props}
    />
  )
}

export function PaginationPrevious({ className, ...props }) {
  return (
    <PaginationLink
      aria-label="Go to previous page"
      size="default"
      className={cn("gap-1 pl-2.5", className)}
      {...props}
    >
      <ChevronLeft className="h-4 w-4" />
      <span>Previous</span>
    </PaginationLink>
  )
}

export function PaginationNext({ className, ...props }) {
  return (
    <PaginationLink
      aria-label="Go to next page"
      size="default"
      className={cn("gap-1 pr-2.5", className)}
      {...props}
    >
      <span>Next</span>
      <ChevronRight className="h-4 w-4" />
    </PaginationLink>
  )
}

export function PaginationEllipsis({ className, ...props }) {
  return (
    <span
      aria-hidden
      className={cn("flex h-9 w-9 items-center justify-center", className)}
      {...props}
    >
      <MoreHorizontal className="h-4 w-4" />
      <span className="sr-only">More pages</span>
    </span>
  )
}
PaginationEllipsis.displayName = "PaginationEllipsis"



===== components/ui/text-reveal-card.jsx =====
"use client"
import React, { useState } from "react"
import { motion } from "framer-motion"
import { cn } from "@/lib/utils"

export const TextRevealCard = ({
  text,
  revealText,
  children,
  className,
}) => {
  const [isHovered, setIsHovered] = useState(false)

  return (
    <div
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
      className={cn(
        "relative w-full max-w-5xl mx-auto h-auto rounded-3xl p-10 overflow-hidden bg-white border border-gray-100",
        className
      )}
    >
      <div className="relative z-10">
        <motion.div
          initial={{ opacity: 1 }}
          animate={{ opacity: isHovered ? 0 : 1 }}
          transition={{ duration: 0.3 }}
          className="text-4xl md:text-5xl font-bold text-center"
        >
          {text}
        </motion.div>

        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: isHovered ? 1 : 0 }}
          transition={{ duration: 0.3 }}
          className="text-4xl md:text-5xl font-bold text-center absolute top-0 left-0 right-0"
        >
          {revealText}
        </motion.div>
      </div>

      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: isHovered ? 1 : 0 }}
        transition={{ duration: 0.3 }}
        className="mt-4"
      >
        {children}
      </motion.div>
    </div>
  )
}



===== components/ui/typing-effect.jsx =====
// components/ui/typing-effect.jsx

import React, { useState, useEffect, useRef } from 'react';

export const EnhancedTypingEffect = ({ 
  text, 
  speed = 30,
  delay = 0,
  cursor = true,
  onComplete = () => {},
  className = "",
  cursorClassName = "inline-block h-5 w-2 ml-1 bg-black animate-pulse"
}) => {
  const [displayedText, setDisplayedText] = useState('');
  const [isComplete, setIsComplete] = useState(false);
  const timeoutRef = useRef(null);

  useEffect(() => {
    if (!text) return;
    
    // Reset state when text changes
    setDisplayedText('');
    setIsComplete(false);
    
    let currentText = '';
    let currentIndex = 0;
    
    // Add initial delay
    const startTyping = () => {
      const interval = setInterval(() => {
        if (currentIndex < text.length) {
          // Implement variable speed for punctuation
          const char = text[currentIndex];
          currentText += char;
          setDisplayedText(currentText);
          currentIndex++;
          
          // Slow down slightly for punctuation
          if (['.', '!', '?', ',', ';', ':'].includes(char)) {
            clearInterval(interval);
            timeoutRef.current = setTimeout(() => startTyping(), speed * 6);
            return;
          }
          
          // Add slight pause for new lines and paragraphs
          if (char === '\n') {
            clearInterval(interval);
            timeoutRef.current = setTimeout(() => startTyping(), speed * 10);
            return;
          }
        } else {
          clearInterval(interval);
          setIsComplete(true);
          onComplete();
        }
      }, speed);
      
      return interval;
    };
    
    timeoutRef.current = setTimeout(() => {
      const interval = startTyping();
      return () => {
        clearInterval(interval);
        clearTimeout(timeoutRef.current);
      };
    }, delay);
    
    return () => {
      clearTimeout(timeoutRef.current);
    };
  }, [text, speed, delay, onComplete]);
  
  // معالجة النص المعروض مع تنسيقات بسيطة
  const formatText = (text) => {
    if (!text) return '';
    
    // استخدام تعبيرات منتظمة لتنسيق النص
    let formattedText = text;
    
    // معالجة النص العريض **نص**
    formattedText = formattedText.replace(/\*\*([^*]+)\*\*/g, '<strong>$1</strong>');
    
    // معالجة النص المائل *نص*
    formattedText = formattedText.replace(/\*([^*]+)\*/g, '<em>$1</em>');
    
    // معالجة الروابط [نص](رابط)
    formattedText = formattedText.replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2" target="_blank" class="text-blue-600 hover:underline">$1</a>');
    
    // معالجة الكود `نص`
    formattedText = formattedText.replace(/`([^`]+)`/g, '<code class="bg-gray-100 px-1 py-0.5 rounded text-sm">$1</code>');
    
    return formattedText;
  };
  
  return (
    <div className={className}>
      <span dangerouslySetInnerHTML={{ __html: formatText(displayedText) }} />
      {cursor && !isComplete && (
        <span className={cursorClassName}></span>
      )}
    </div>
  );
};

// مكون إضافي أكثر تقدمًا للكتابة مع وقفات مختلفة ودعم المقاطع
export const AdvancedTypingEffect = ({
  content = [],  // مصفوفة من الكائنات مع نص وسرعة ووقفة
  className = "",
  cursorClassName = "inline-block h-5 w-2 ml-1 bg-black animate-pulse",
  onComplete = () => {}
}) => {
  const [currentSegmentIndex, setCurrentSegmentIndex] = useState(0);
  const [displayedSegments, setDisplayedSegments] = useState([]);
  const [isTyping, setIsTyping] = useState(false);
  
  useEffect(() => {
    if (!content.length || currentSegmentIndex >= content.length) {
      onComplete();
      return;
    }
    
    setIsTyping(true);
    const segment = content[currentSegmentIndex];
    const timer = setTimeout(() => {
      setDisplayedSegments(prev => [...prev, segment]);
      setCurrentSegmentIndex(prev => prev + 1);
      setIsTyping(false);
    }, segment.delay || 0);
    
    return () => clearTimeout(timer);
  }, [content, currentSegmentIndex, onComplete]);
  
  return (
    <div className={className}>
      {displayedSegments.map((segment, i) => (
        <div key={i} className={segment.className || ''}>
          <EnhancedTypingEffect 
            text={segment.text} 
            speed={segment.speed || 30}
            delay={0}  // الوقفة تم التعامل معها بالفعل في هذا المستوى
            cursor={false}
            className={segment.textClassName || ''}
          />
        </div>
      ))}
      {isTyping && (
        <span className={cursorClassName}></span>
      )}
    </div>
  );
};

// استخدم هذا لكتابة نص مع تأخير وانتظار لإظهار النص التالي
export const TypewriterEffect = ({ 
  textItems = [], // مصفوفة من الأنماط لعرضها بالتسلسل { text: string, delay: number }
  cursorClassName = "inline-block h-5 w-2 ml-1 bg-black animate-pulse",
  className = ""
}) => {
  const [currentIndex, setCurrentIndex] = useState(0);
  const [displayText, setDisplayText] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const [showCursor, setShowCursor] = useState(true);
  
  useEffect(() => {
    if (textItems.length === 0 || currentIndex >= textItems.length) return;
    
    const currentItem = textItems[currentIndex];
    let typingTimeout;
    
    const typeText = () => {
      setIsTyping(true);
      let i = 0;
      const text = currentItem.text;
      
      const typeChar = () => {
        if (i < text.length) {
          setDisplayText(prev => prev + text.charAt(i));
          i++;
          typingTimeout = setTimeout(typeChar, Math.random() * 40 + 30); // سرعة كتابة عشوائية للواقعية
        } else {
          setIsTyping(false);
          
          // عند الانتهاء من الكتابة، انتظر ثم امسح
          typingTimeout = setTimeout(() => {
            if (currentIndex < textItems.length - 1) {
              eraseText();
            } else {
              // انتهت جميع عناصر النص
              setShowCursor(false);
            }
          }, currentItem.stayTime || 2000);
        }
      };
      
      const eraseText = () => {
        setIsTyping(true);
        let text = displayText;
        
        const eraseChar = () => {
          if (text.length > 0) {
            text = text.slice(0, -1);
            setDisplayText(text);
            typingTimeout = setTimeout(eraseChar, Math.random() * 20 + 10); // سرعة مسح أسرع
          } else {
            setIsTyping(false);
            setCurrentIndex(prev => prev + 1);
          }
        };
        
        typingTimeout = setTimeout(eraseChar, currentItem.eraseDelay || 500);
      };
      
      // ابدأ الطباعة بعد التأخير المحدد
      typingTimeout = setTimeout(typeChar, currentItem.delay || 0);
    };
    
    // ابدأ عملية الكتابة
    typeText();
    
    return () => clearTimeout(typingTimeout);
  }, [textItems, currentIndex]);
  
  // عندما يتغير فهرس العنصر الحالي، ابدأ بنص فارغ
  useEffect(() => {
    setDisplayText('');
  }, [currentIndex]);
  
  return (
    <div className={className}>
      <span>{displayText}</span>
      {showCursor && <span className={cursorClassName}></span>}
    </div>
  );
};

export default EnhancedTypingEffect;


===== components/ui/card-hover-effect.jsx =====
"use client"
import React, { useState } from "react"
import { cn } from "@/lib/utils"
import { AnimatePresence, motion } from "framer-motion"

export const HoverEffect = ({ items, className }) => {
  const [hoveredIndex, setHoveredIndex] = useState(null)

  return (
    <div className={cn("grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 py-10", className)}>
      {items.map((item, idx) => (
        <div
          key={idx}
          className="relative group block p-2 h-full w-full"
          onMouseEnter={() => setHoveredIndex(idx)}
          onMouseLeave={() => setHoveredIndex(null)}
        >
          <AnimatePresence>
            {hoveredIndex === idx && (
              <motion.span
                className="absolute inset-0 h-full w-full bg-black/5 block rounded-3xl"
                layoutId="hoverBackground"
                initial={{ opacity: 0 }}
                animate={{
                  opacity: 1,
                  transition: { duration: 0.15 },
                }}
                exit={{
                  opacity: 0,
                  transition: { duration: 0.15, delay: 0.2 },
                }}
              />
            )}
          </AnimatePresence>
          <Card>
            <div className="h-12 w-12 rounded-2xl bg-white border border-gray-100 shadow-sm flex items-center justify-center mb-4 group-hover:scale-110 transition-transform duration-300">
              {item.icon}
            </div>
            <CardTitle>{item.title}</CardTitle>
            <CardDescription>{item.description}</CardDescription>
          </Card>
        </div>
      ))}
    </div>
  )
}

export const Card = ({ className, children }) => {
  return (
    <div
      className={cn(
        "rounded-2xl h-full w-full p-6 overflow-hidden border border-gray-100 bg-white shadow-sm relative z-20",
        className
      )}
    >
      {children}
    </div>
  )
}

export const CardTitle = ({ className, children }) => {
  return <h4 className={cn("text-xl font-medium tracking-wide text-black mt-4", className)}>{children}</h4>
}

export const CardDescription = ({ className, children }) => {
  return (
    <p className={cn("mt-2 text-gray-600 tracking-wide leading-relaxed font-light", className)}>{children}</p>
  )
}



===== components/ui/alert-dialog.jsx =====
"use client"

import React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"
import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root
const AlertDialogTrigger = AlertDialogPrimitive.Trigger
const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef((props, ref) => {
  const { className, ...rest } = props
  return (
    <AlertDialogPrimitive.Overlay
      ref={ref}
      className={cn(
        "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
        className
      )}
      {...rest}
    />
  )
})
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef((props, ref) => {
  const { className, ...rest } = props
  return (
    <AlertDialogPortal>
      <AlertDialogOverlay />
      <AlertDialogPrimitive.Content
        ref={ref}
        className={cn(
          "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
          className
        )}
        {...rest}
      />
    </AlertDialogPortal>
  )
})
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = (props) => {
  const { className, ...rest } = props
  return <div className={cn("flex flex-col space-y-2 text-center sm:text-left", className)} {...rest} />
}
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = (props) => {
  const { className, ...rest } = props
  return (
    <div className={cn("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2", className)} {...rest} />
  )
}
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef((props, ref) => {
  const { className, ...rest } = props
  return (
    <AlertDialogPrimitive.Title ref={ref} className={cn("text-lg font-semibold", className)} {...rest} />
  )
})
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef((props, ref) => {
  const { className, ...rest } = props
  return (
    <AlertDialogPrimitive.Description
      ref={ref}
      className={cn("text-sm text-muted-foreground", className)}
      {...rest}
    />
  )
})
AlertDialogDescription.displayName = AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef((props, ref) => {
  const { className, ...rest } = props
  return (
    <AlertDialogPrimitive.Action ref={ref} className={cn(buttonVariants(), className)} {...rest} />
  )
})
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef((props, ref) => {
  const { className, ...rest } = props
  return (
    <AlertDialogPrimitive.Cancel
      ref={ref}
      className={cn(buttonVariants({ variant: "outline" }), "mt-2 sm:mt-0", className)}
      {...rest}
    />
  )
})
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}



===== components/ui/aspect-ratio.jsx =====
"use client"

import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"
import React from "react"

const AspectRatio = AspectRatioPrimitive.Root

export { AspectRatio }



===== components/ui/use-mobile.js =====
import React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}



===== components/ui/dot-grid.jsx =====
"use client"

import React, { useEffect, useRef, useState } from "react"
import { cn } from "@/lib/utils"

export function DotGrid({ className, gridSize = 30, dotSize = 1, dotColor = "#e5e7eb" }) {
  const canvasRef = useRef(null)
  const [dimensions, setDimensions] = useState({ width: 0, height: 0 })

  useEffect(() => {
    const handleResize = () => {
      if (canvasRef.current) {
        const { width, height } = canvasRef.current.getBoundingClientRect()
        setDimensions({ width, height })
        const dpr = window.devicePixelRatio || 1
        canvasRef.current.width = width * dpr
        canvasRef.current.height = height * dpr

        const ctx = canvasRef.current.getContext("2d")
        if (ctx) {
          ctx.scale(dpr, dpr)
        }
        drawGrid()
      }
    }
    handleResize()
    window.addEventListener("resize", handleResize)
    return () => window.removeEventListener("resize", handleResize)
  }, [])

  const drawGrid = () => {
    if (!canvasRef.current) return
    const ctx = canvasRef.current.getContext("2d")
    if (!ctx) return

    ctx.clearRect(0, 0, dimensions.width, dimensions.height)
    ctx.fillStyle = dotColor

    const cols = Math.floor(dimensions.width / gridSize)
    const rows = Math.floor(dimensions.height / gridSize)

    for (let i = 0; i <= cols; i++) {
      for (let j = 0; j <= rows; j++) {
        ctx.beginPath()
        ctx.arc(i * gridSize, j * gridSize, dotSize, 0, Math.PI * 2)
        ctx.fill()
      }
    }
  }

  useEffect(() => {
    drawGrid()
  }, [dimensions, dotColor, dotSize, gridSize])

  return <canvas ref={canvasRef} className={cn("absolute inset-0 -z-10", className)} />
}



===== components/ui/alert.jsx =====
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }



===== components/ui/tooltip.jsx =====
"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }



===== components/ui/sparkles.jsx =====
"use client"
import { useEffect, useRef, useState } from "react"
import { cn } from "@/lib/utils"

/**
 * مكوّن لإنشاء مؤثر "Sparkles" (نجوم أو جسيمات متحركة) في الخلفية.
 * يقبل عدة خواص للتحكم في اللون والحجم والسرعة والكثافة... إلخ.
 */
export function SparklesCore({
  id,
  background,
  minSize,
  maxSize,
  speed,
  particleColor,
  className,
  particleDensity,
}) {
  const [windowSize, setWindowSize] = useState({ width: 0, height: 0 })
  const canvasRef = useRef(null)

  useEffect(() => {
    const handleResize = () => {
      setWindowSize({
        width: window.innerWidth,
        height: window.innerHeight,
      })
    }
    handleResize()
    window.addEventListener("resize", handleResize)
    return () => {
      window.removeEventListener("resize", handleResize)
    }
  }, [])

  useEffect(() => {
    const canvas = canvasRef.current
    if (!canvas) return

    const ctx = canvas.getContext("2d")
    if (!ctx) return

    const particlesArray = []
    // حساب عدد الجسيمات بناءً على حجم النافذة
    const particleCount = Math.min(
      Math.max(Math.floor((windowSize.width * windowSize.height) / 8000), 100),
      particleDensity || 300
    )

    canvas.width = windowSize.width
    canvas.height = windowSize.height

    class Particle {
      constructor() {
        this.x = Math.random() * canvas.width
        this.y = Math.random() * canvas.height
        this.size = Math.random() * (maxSize || 3) + (minSize || 0.5)
        this.speedX = Math.random() * (speed || 0.5) - (speed || 0.5) / 2
        this.speedY = Math.random() * (speed || 0.5) - (speed || 0.5) / 2
        this.color = particleColor || "#ffffff"
      }
      update() {
        this.x += this.speedX
        this.y += this.speedY
        if (this.size > 0.1) this.size -= 0.01

        // إعادة الجسيمات عندما تتجاوز حدود الشاشة
        if (this.x > canvas.width) this.x = 0
        else if (this.x < 0) this.x = canvas.width

        if (this.y > canvas.height) this.y = 0
        else if (this.y < 0) this.y = canvas.height
      }
      draw() {
        if (!ctx) return
        ctx.fillStyle = this.color
        ctx.beginPath()
        ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2)
        ctx.closePath()
        ctx.fill()
      }
    }

    const init = () => {
      for (let i = 0; i < particleCount; i++) {
        particlesArray.push(new Particle())
      }
    }

    const animate = () => {
      if (!ctx) return
      ctx.clearRect(0, 0, canvas.width, canvas.height)
      for (let i = 0; i < particlesArray.length; i++) {
        particlesArray[i].update()
        particlesArray[i].draw()
      }
      requestAnimationFrame(animate)
    }

    init()
    animate()
  }, [windowSize, minSize, maxSize, speed, particleColor, particleDensity])

  return (
    <canvas
      ref={canvasRef}
      id={id || "tsparticles"}
      style={{ background: background || "transparent" }}
      className={cn("fixed inset-0 -z-10", className)}
    />
  )
}



===== components/ui/drawer.jsx =====
"use client"

import React, { forwardRef } from "react"
import { Drawer as DrawerPrimitive } from "vaul"
import { cn } from "@/lib/utils"

export function Drawer({ shouldScaleBackground = true, ...props }) {
  return <DrawerPrimitive.Root shouldScaleBackground={shouldScaleBackground} {...props} />
}

export const DrawerTrigger = DrawerPrimitive.Trigger
export const DrawerPortal = DrawerPrimitive.Portal
export const DrawerClose = DrawerPrimitive.Close

export const DrawerOverlay = forwardRef(function DrawerOverlay(props, ref) {
  const { className, ...rest } = props
  return (
    <DrawerPrimitive.Overlay
      ref={ref}
      className={cn("fixed inset-0 z-50 bg-black/80", className)}
      {...rest}
    />
  )
})
DrawerOverlay.displayName = "DrawerOverlay"

export const DrawerContent = forwardRef(function DrawerContent(props, ref) {
  const { className, children, ...rest } = props
  return (
    <DrawerPortal>
      <DrawerOverlay />
      <DrawerPrimitive.Content
        ref={ref}
        className={cn(
          "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
          className
        )}
        {...rest}
      >
        <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
        {children}
      </DrawerPrimitive.Content>
    </DrawerPortal>
  )
})
DrawerContent.displayName = "DrawerContent"

export function DrawerHeader(props) {
  const { className, ...rest } = props
  return <div className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)} {...rest} />
}
DrawerHeader.displayName = "DrawerHeader"

export function DrawerFooter(props) {
  const { className, ...rest } = props
  return <div className={cn("mt-auto flex flex-col gap-2 p-4", className)} {...rest} />
}
DrawerFooter.displayName = "DrawerFooter"

export const DrawerTitle = forwardRef(function DrawerTitle(props, ref) {
  const { className, ...rest } = props
  return (
    <DrawerPrimitive.Title
      ref={ref}
      className={cn("text-lg font-semibold leading-none tracking-tight", className)}
      {...rest}
    />
  )
})
DrawerTitle.displayName = "DrawerTitle"

export const DrawerDescription = forwardRef(function DrawerDescription(props, ref) {
  const { className, ...rest } = props
  return (
    <DrawerPrimitive.Description
      ref={ref}
      className={cn("text-sm text-muted-foreground", className)}
      {...rest}
    />
  )
})
DrawerDescription.displayName = "DrawerDescription"



===== components/ui/accordion.jsx =====
"use client"

import React, { forwardRef } from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"
import { cn } from "@/lib/utils"

export const Accordion = AccordionPrimitive.Root

export const AccordionItem = forwardRef(function AccordionItem(props, ref) {
  const { className, ...rest } = props
  return (
    <AccordionPrimitive.Item ref={ref} className={cn("border-b", className)} {...rest} />
  )
})
AccordionItem.displayName = "AccordionItem"

export const AccordionTrigger = forwardRef(function AccordionTrigger(props, ref) {
  const { className, children, ...rest } = props
  return (
    <AccordionPrimitive.Header className="flex">
      <AccordionPrimitive.Trigger
        ref={ref}
        className={cn(
          "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline",
          "[&[data-state=open]>svg]:rotate-180",
          className
        )}
        {...rest}
      >
        {children}
        <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
      </AccordionPrimitive.Trigger>
    </AccordionPrimitive.Header>
  )
})
AccordionTrigger.displayName = "AccordionTrigger"

export const AccordionContent = forwardRef(function AccordionContent(props, ref) {
  const { className, children, ...rest } = props
  return (
    <AccordionPrimitive.Content
      ref={ref}
      className={cn(
        "overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down",
        className
      )}
      {...rest}
    >
      <div className="pb-4 pt-0">{children}</div>
    </AccordionPrimitive.Content>
  )
})
AccordionContent.displayName = "AccordionContent"



===== components/ui/pin-container.jsx =====
"use client"

import React, { useState, useRef } from "react"
import { motion } from "framer-motion"
import { cn } from "@/lib/utils"

export function PinContainer({
  children,
  title,
  containerClassName,
  className,
  href,
}) {
  const [transform, setTransform] = useState({ translateX: 0, translateY: 0, scale: 1 })
  const containerRef = useRef(null)
  const targetRef = useRef(null)

  const handleMouseMove = (e) => {
    if (!containerRef.current || !targetRef.current) return
    const containerRect = containerRef.current.getBoundingClientRect()
    const diffX = e.clientX - (containerRect.left + containerRect.width / 2)
    const diffY = e.clientY - (containerRect.top + containerRect.height / 2)

    const translateX = diffX / 10
    const translateY = diffY / 10

    setTransform({ translateX, translateY, scale: 1.05 })
  }

  const handleMouseLeave = () => {
    setTransform({ translateX: 0, translateY: 0, scale: 1 })
  }

  const inner = (
    <div
      ref={containerRef}
      className={cn(
        "relative h-full w-full p-px bg-gradient-to-b from-white/30 to-transparent rounded-full shadow-input transition-transform-colors duration-200",
        containerClassName
      )}
      onMouseMove={handleMouseMove}
      onMouseLeave={handleMouseLeave}
    >
      <motion.div
        ref={targetRef}
        animate={{
          translateX: transform.translateX,
          translateY: transform.translateY,
          scale: transform.scale,
        }}
        transition={{
          type: "spring",
          stiffness: 400,
          damping: 20,
          mass: 1,
        }}
        className="bg-white h-full w-full flex items-center justify-center text-black rounded-full"
      >
        <div className={cn(className)}>
          {title && <div className="text-xs font-medium opacity-70">{title}</div>}
          {children}
        </div>
      </motion.div>
    </div>
  )

  if (href) {
    return (
      <a href={href} className="block h-full w-full">
        {inner}
      </a>
    )
  }

  return inner
}



===== components/ui/navigation-menu.jsx =====
import React, { forwardRef } from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

export const NavigationMenu = forwardRef(function NavigationMenu(props, ref) {
  const { className, children, ...rest } = props
  return (
    <NavigationMenuPrimitive.Root
      ref={ref}
      className={cn("relative z-10 flex max-w-max flex-1 items-center justify-center", className)}
      {...rest}
    >
      {children}
      <NavigationMenuViewport />
    </NavigationMenuPrimitive.Root>
  )
})
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

export const NavigationMenuList = forwardRef(function NavigationMenuList(props, ref) {
  const { className, ...rest } = props
  return (
    <NavigationMenuPrimitive.List
      ref={ref}
      className={cn("group flex flex-1 list-none items-center justify-center space-x-1", className)}
      {...rest}
    />
  )
})
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

export const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50"
)

export const NavigationMenuTrigger = forwardRef(function NavigationMenuTrigger(props, ref) {
  const { className, children, ...rest } = props
  return (
    <NavigationMenuPrimitive.Trigger
      ref={ref}
      className={cn(navigationMenuTriggerStyle(), "group", className)}
      {...rest}
    >
      {children}{" "}
      <ChevronDown
        className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
        aria-hidden="true"
      />
    </NavigationMenuPrimitive.Trigger>
  )
})
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

export const NavigationMenuContent = forwardRef(function NavigationMenuContent(props, ref) {
  const { className, ...rest } = props
  return (
    <NavigationMenuPrimitive.Content
      ref={ref}
      className={cn(
        "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out",
        "data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52",
        "data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52",
        "data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto",
        className
      )}
      {...rest}
    />
  )
})
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

export const NavigationMenuLink = NavigationMenuPrimitive.Link

export const NavigationMenuViewport = forwardRef(function NavigationMenuViewport(props, ref) {
  const { className, ...rest } = props
  return (
    <div className="absolute left-0 top-full flex justify-center">
      <NavigationMenuPrimitive.Viewport
        ref={ref}
        className={cn(
          "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg",
          "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90",
          "md:w-[var(--radix-navigation-menu-viewport-width)]",
          className
        )}
        {...rest}
      />
    </div>
  )
})
NavigationMenuViewport.displayName = NavigationMenuPrimitive.Viewport.displayName

export const NavigationMenuIndicator = forwardRef(function NavigationMenuIndicator(props, ref) {
  const { className, ...rest } = props
  return (
    <NavigationMenuPrimitive.Indicator
      ref={ref}
      className={cn(
        "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden",
        "data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
        className
      )}
      {...rest}
    >
      <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
    </NavigationMenuPrimitive.Indicator>
  )
})
NavigationMenuIndicator.displayName = NavigationMenuPrimitive.Indicator.displayName



===== components/ui/sonner.jsx =====
"use client"

import React from "react"
import { useTheme } from "next-themes"
import { Toaster as SonnerToaster } from "sonner"

/**
 * يشبه ملف "toaster.tsx" لكن يستخدم مكتبة Sonner.
 * استخدمناه مع next-themes لإعطاء الثيم مناسب.
 */

export function Toaster(props) {
  const { theme = "system" } = useTheme()

  return (
    <SonnerToaster
      theme={theme}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton: "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton: "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  )
}



===== components/ui/label.jsx =====
"use client"

import React, { forwardRef } from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva } from "class-variance-authority"
import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

export const Label = forwardRef(function Label(props, ref) {
  const { className, ...rest } = props
  return (
    <LabelPrimitive.Root ref={ref} className={cn(labelVariants(), className)} {...rest} />
  )
})
Label.displayName = LabelPrimitive.Root.displayName



===== components/ui/resizable.jsx =====
"use client"

import React from "react"
import { GripVertical } from "lucide-react"
import * as ResizablePrimitive from "react-resizable-panels"
import { cn } from "@/lib/utils"

export function ResizablePanelGroup({ className, ...props }) {
  return (
    <ResizablePrimitive.PanelGroup
      className={cn("flex h-full w-full data-[panel-group-direction=vertical]:flex-col", className)}
      {...props}
    />
  )
}

export const ResizablePanel = ResizablePrimitive.Panel

export function ResizableHandle({ withHandle, className, ...props }) {
  return (
    <ResizablePrimitive.PanelResizeHandle
      className={cn(
        "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2",
        "focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1",
        "data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full",
        "data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1",
        "data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2",
        className
      )}
      {...props}
    >
      {withHandle && (
        <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
          <GripVertical className="h-2.5 w-2.5" />
        </div>
      )}
    </ResizablePrimitive.PanelResizeHandle>
  )
}



===== components/ui/scroll-area.jsx =====
"use client"

import React, { forwardRef } from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"
import { cn } from "@/lib/utils"

export const ScrollArea = forwardRef(function ScrollArea(props, ref) {
  const { className, children, ...rest } = props
  return (
    <ScrollAreaPrimitive.Root ref={ref} className={cn("relative overflow-hidden", className)} {...rest}>
      <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
        {children}
      </ScrollAreaPrimitive.Viewport>
      <ScrollBar />
      <ScrollAreaPrimitive.Corner />
    </ScrollAreaPrimitive.Root>
  )
})
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

export const ScrollBar = forwardRef(function ScrollBar(props, ref) {
  const { className, orientation = "vertical", ...rest } = props
  return (
    <ScrollAreaPrimitive.ScrollAreaScrollbar
      ref={ref}
      orientation={orientation}
      className={cn(
        "flex touch-none select-none transition-colors",
        orientation === "vertical" && "h-full w-2.5 border-l border-l-transparent p-[1px]",
        orientation === "horizontal" && "h-2.5 flex-col border-t border-t-transparent p-[1px]",
        className
      )}
      {...rest}
    >
      <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
    </ScrollAreaPrimitive.ScrollAreaScrollbar>
  )
})
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName



===== components/ui/tracing-beam.jsx =====
"use client"

import React, { useEffect, useRef, useState } from "react"
import { motion, useAnimation, useScroll, useSpring, useTransform } from "framer-motion"
import { cn } from "@/lib/utils"

export function TracingBeam({ children, className }) {
  const ref = useRef(null)
  const { scrollYProgress } = useScroll({
    target: ref,
    offset: ["start start", "end start"],
  })

  // تحريك المسارين Y1, Y2
  const y1 = useSpring(useTransform(scrollYProgress, [0, 0.8], [50, 1000]), {
    stiffness: 500,
    damping: 90,
  })
  const y2 = useSpring(useTransform(scrollYProgress, [0, 1], [50, 800]), {
    stiffness: 500,
    damping: 90,
  })

  return (
    <motion.div ref={ref} className={cn("relative mx-auto h-full w-full max-w-4xl", className)}>
      <div className="absolute -left-20 top-3 md:-left-12 md:top-0">
        <motion.div
          transition={{
            duration: 0.2,
            delay: 0.5,
          }}
          animate={{
            boxShadow: scrollYProgress.get() > 0 ? "none" : "rgba(138, 43, 226, 0.5) 0px 0px 30px 10px",
          }}
          className="relative flex h-4 w-4 items-center justify-center rounded-full border border-white/20 bg-white/20"
        >
          <motion.div
            transition={{
              duration: 0.2,
              delay: 0.5,
            }}
            animate={{
              backgroundColor: scrollYProgress.get() > 0 ? "white" : "rgba(138, 43, 226, 1)",
              scale: scrollYProgress.get() > 0 ? 0.5 : 1,
            }}
            className="h-1.5 w-1.5 rounded-full bg-white"
          />
        </motion.div>
        <svg
          viewBox="0 0 20 1000"
          width="20"
          height="1000"
          className="block"
          aria-hidden="true"
        >
          <motion.path
            d="M 1 0 V 1000"
            fill="none"
            stroke="white"
            strokeOpacity="0.2"
            strokeWidth="1"
            initial={{
              strokeDasharray: 1000,
              strokeDashoffset: 1000,
            }}
            style={{
              strokeDashoffset: y1,
            }}
          />
          <motion.path
            d="M 10 0 V 1000"
            fill="none"
            stroke="url(#gradient)"
            strokeWidth="2"
            initial={{
              strokeDasharray: 1000,
              strokeDashoffset: 1000,
            }}
            style={{
              strokeDashoffset: y2,
            }}
          />
          <defs>
            <linearGradient id="gradient" x1="0" y1="0" x2="0" y2="1">
              <stop stopColor="#000000" stopOpacity="0" offset="0" />
              <stop stopColor="#000000" offset="0.2" />
              <stop stopColor="#000000" offset="0.8" />
              <stop stopColor="#000000" stopOpacity="0" offset="1" />
            </linearGradient>
          </defs>
        </svg>
      </div>
      <div className="relative">{children}</div>
    </motion.div>
  )
}



===== components/ui/sheet.jsx =====
"use client"

import React, { forwardRef } from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva } from "class-variance-authority"
import { X } from "lucide-react"
import { cn } from "@/lib/utils"

export const Sheet = SheetPrimitive.Root
export const SheetTrigger = SheetPrimitive.Trigger
export const SheetClose = SheetPrimitive.Close
export const SheetPortal = SheetPrimitive.Portal

export const SheetOverlay = forwardRef(function SheetOverlay(props, ref) {
  const { className, ...rest } = props
  return (
    <SheetPrimitive.Overlay
      ref={ref}
      className={cn(
        "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out",
        "data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
        className
      )}
      {...rest}
    />
  )
})
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out " +
    "data-[state=open]:animate-in data-[state=closed]:animate-out " +
    "data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left:
          "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left " +
          "data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right " +
          "data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

export const SheetContent = forwardRef(function SheetContent(props, ref) {
  const { side = "right", className, children, ...rest } = props
  return (
    <SheetPortal>
      <SheetOverlay />
      <SheetPrimitive.Content
        ref={ref}
        className={cn(sheetVariants({ side }), className)}
        {...rest}
      >
        {children}
        <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none">
          <X className="h-4 w-4" />
          <span className="sr-only">Close</span>
        </SheetPrimitive.Close>
      </SheetPrimitive.Content>
    </SheetPortal>
  )
})
SheetContent.displayName = SheetPrimitive.Content.displayName

export function SheetHeader({ className, ...props }) {
  return (
    <div
      className={cn("flex flex-col space-y-2 text-center sm:text-left", className)}
      {...props}
    />
  )
}
SheetHeader.displayName = "SheetHeader"

export function SheetFooter({ className, ...props }) {
  return (
    <div
      className={cn("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2", className)}
      {...props}
    />
  )
}
SheetFooter.displayName = "SheetFooter"

export const SheetTitle = forwardRef(function SheetTitle(props, ref) {
  const { className, ...rest } = props
  return (
    <SheetPrimitive.Title
      ref={ref}
      className={cn("text-lg font-semibold text-foreground", className)}
      {...rest}
    />
  )
})
SheetTitle.displayName = SheetPrimitive.Title.displayName

export const SheetDescription = forwardRef(function SheetDescription(props, ref) {
  const { className, ...rest } = props
  return (
    <SheetPrimitive.Description
      ref={ref}
      className={cn("text-sm text-muted-foreground", className)}
      {...rest}
    />
  )
})
SheetDescription.displayName = SheetPrimitive.Description.displayName



===== components/ui/hover-card.jsx =====
"use client"

import React, { forwardRef } from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"
import { cn } from "@/lib/utils"

export const HoverCard = HoverCardPrimitive.Root
export const HoverCardTrigger = HoverCardPrimitive.Trigger

export const HoverCardContent = forwardRef(function HoverCardContent(
  { className, align = "center", sideOffset = 4, ...props },
  ref
) {
  return (
    <HoverCardPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none",
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0",
        "data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95",
        "data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2",
        "data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  )
})
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName



===== components/ui/chart.jsx =====
"use client"

import React, { createContext, useContext, forwardRef } from "react"
import * as RechartsPrimitive from "recharts"
import { cn } from "@/lib/utils"

/**
 * THEMES عبارة عن كائن لتحديد شكل الألوان في النمط الفاتح والداكن.
 * يمكنك التعديل حسب الحاجة أو حسب سياقك.
 */
const THEMES = { light: "", dark: ".dark" }

/**
 * في الأصل كان هناك type ChartConfig في تايبسكريبت.
 * نستعيض عنه الآن بمجرد تعليق أو Object عادي.
 * يمثل: { [key: string]: { label?: React.ReactNode; icon?: React.ComponentType; color?: string; theme?: Record<string, string> } }
 */

/** سياق الرسم البياني */
const ChartContext = createContext(null)

/** hook للحصول على config من السياق */
function useChart() {
  const context = useContext(ChartContext)
  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }
  return context
}

/**
 * ChartContainer
 * مكوّن أساسي يحتوي على Recharts ResponsiveContainer ويحوي config للألوان والإعدادات.
 */
export const ChartContainer = forwardRef(function ChartContainer(
  { id, className, children, config, ...props },
  ref
) {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs",
          "[&_svg]:overflow-visible [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground",
          "[&_svg_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50",
          "[&_svg_.recharts-curve.recharts-tooltip-cursor]:stroke-border",
          "[&_svg_.recharts-dot[stroke='#fff']]:stroke-transparent",
          "[&_svg_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border",
          "[&_svg_.recharts-radial-bar-background-sector]:fill-muted",
          "[&_svg_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted",
          "[&_svg_.recharts-reference-line_[stroke='#ccc']]:stroke-border",
          "[&_svg_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>{children}</RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})

/**
 * يضيف ستايلات ديناميكية للألوان بناء على config لكل تمبليت.
 */
export function ChartStyle({ id, config }) {
  if (!config) return null

  // استخرج المفاتيح التي تحتوي على color/theme
  const colorConfig = Object.entries(config).filter(([_, val]) => val.theme || val.color)

  if (!colorConfig.length) {
    return null
  }

  // نبني أسلوب (CSS) لكلا النمطين light & dark
  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(([theme, prefix]) => {
            return `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color = itemConfig.theme?.[theme] || itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .filter(Boolean)
  .join("\n")}
}
`
          })
          .join("\n"),
      }}
    />
  )
}

/**
 * مجرد ربطات مختصرة لـ Recharts Tooltip, Legend, إلخ.
 */
export const ChartTooltip = RechartsPrimitive.Tooltip

export const ChartTooltipContent = forwardRef(function ChartTooltipContent(
  {
    active,
    payload,
    className,
    indicator = "dot",
    hideLabel = false,
    hideIndicator = false,
    label,
    labelFormatter,
    labelClassName,
    formatter,
    color,
    nameKey,
    labelKey,
    ...props
  },
  ref
) {
  const { config } = useChart()

  const tooltipLabel = React.useMemo(() => {
    if (hideLabel || !payload?.length) {
      return null
    }
    const item = payload[0]
    if (!item) return null

    const valueKey = labelKey || item.dataKey || item.name || "value"
    const itemConfig = getPayloadConfigFromPayload(config, item, valueKey)
    const finalLabel = !labelKey && typeof label === "string" ? config[label]?.label || label : itemConfig?.label

    if (labelFormatter) {
      return <div className={cn("font-medium", labelClassName)}>{labelFormatter(finalLabel, payload)}</div>
    }
    if (!finalLabel) return null

    return <div className={cn("font-medium", labelClassName)}>{finalLabel}</div>
  }, [label, labelFormatter, payload, hideLabel, labelClassName, config, labelKey])

  if (!active || !payload?.length) {
    return null
  }

  const nestLabel = payload.length === 1 && indicator !== "dot"

  return (
    <div
      ref={ref}
      className={cn(
        "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
        className
      )}
      {...props}
    >
      {!nestLabel ? tooltipLabel : null}
      <div className="grid gap-1.5">
        {payload.map((item, index) => {
          const key = nameKey || item.name || item.dataKey || "value"
          const itemConfig = getPayloadConfigFromPayload(config, item, key)
          const indicatorColor = color || item.payload?.fill || item.color

          return (
            <div
              key={item.dataKey}
              className={cn(
                "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                indicator === "dot" && "items-center"
              )}
            >
              {formatter && item.value !== undefined && item.name ? (
                formatter(item.value, item.name, item, index, item.payload)
              ) : (
                <>
                  {!hideIndicator && !itemConfig?.icon && indicator === "dot" && (
                    <div
                      className="shrink-0 h-2.5 w-2.5 rounded-[2px] bg-[--color-bg]"
                      style={{
                        "--color-bg": indicatorColor,
                      }}
                    />
                  )}
                  {!hideIndicator && !itemConfig?.icon && indicator === "line" && (
                    <div
                      className="shrink-0 w-1 rounded-[2px] bg-[--color-bg]"
                      style={{ "--color-bg": indicatorColor }}
                    />
                  )}
                  {!hideIndicator && !itemConfig?.icon && indicator === "dashed" && (
                    <div
                      className="shrink-0 w-0 border-[1.5px] border-dashed bg-transparent"
                      style={{ borderColor: indicatorColor }}
                    />
                  )}
                  {itemConfig?.icon && React.createElement(itemConfig.icon, null)}

                  <div className={cn("flex flex-1 justify-between leading-none", nestLabel ? "items-end" : "items-center")}>
                    <div className="grid gap-1.5">
                      {nestLabel ? tooltipLabel : null}
                      <span className="text-muted-foreground">{itemConfig?.label || item.name}</span>
                    </div>
                    {item.value !== undefined && (
                      <span className="font-mono font-medium tabular-nums text-foreground">
                        {item.value.toLocaleString()}
                      </span>
                    )}
                  </div>
                </>
              )}
            </div>
          )
        })}
      </div>
    </div>
  )
})

ChartTooltipContent.displayName = "ChartTooltipContent"

export const ChartLegend = RechartsPrimitive.Legend

export const ChartLegendContent = forwardRef(function ChartLegendContent(
  { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
  ref
) {
  const { config } = useChart()

  if (!payload?.length) {
    return null
  }

  return (
    <div
      ref={ref}
      className={cn("flex items-center justify-center gap-4", verticalAlign === "top" ? "pb-3" : "pt-3", className)}
    >
      {payload.map((item) => {
        const key = nameKey || item.dataKey || "value"
        const itemConfig = getPayloadConfigFromPayload(config, item, key)

        return (
          <div
            key={item.value}
            className="flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
          >
            {!hideIcon && !itemConfig?.icon ? (
              <div className="h-2 w-2 shrink-0 rounded-[2px]" style={{ backgroundColor: item.color }} />
            ) : null}
            {itemConfig?.icon && React.createElement(itemConfig.icon, null)}

            {itemConfig?.label || item.value}
          </div>
        )
      })}
    </div>
  )
})
ChartLegendContent.displayName = "ChartLegendContent"

function getPayloadConfigFromPayload(config, payload, key) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }
  const p = payload.payload && typeof payload.payload === "object" ? payload.payload : undefined

  let configLabelKey = key

  if (key in payload && typeof payload[key] === "string") {
    configLabelKey = payload[key]
  } else if (p && key in p && typeof p[key] === "string") {
    configLabelKey = p[key]
  }

  if (configLabelKey in config) {
    return config[configLabelKey]
  }
  return config[key]
}



===== components/logo.jsx =====
import React from "react"

export default function Logo() {
  return (
    <div className="flex items-center gap-3">
      <div className="size-14 rounded-2xl bg-gradient-to-br from-black to-gray-800 p-3 flex items-center justify-center shadow-lg relative overflow-hidden group">
        <div className="absolute inset-0 bg-gradient-to-r from-black via-gray-800 to-black opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
        <span className="text-white font-light text-2xl relative z-10">V</span>
      </div>
      <div className="font-light text-3xl tracking-tight">
        <span className="text-black">Video</span>
        <span className="text-gray-400">Summary</span>
      </div>
    </div>
  )
}



===== components/theme-switcher.jsx =====
"use client"

import { Moon, Sun } from "lucide-react"
import { useTheme } from "next-themes"
import { Button } from "@/components/ui/button"
import { useEffect, useState } from "react"

export function ThemeSwitcher() {
  const { setTheme, theme } = useTheme()
  const [mounted, setMounted] = useState(false)

  useEffect(() => {
    setMounted(true)
  }, [])

  if (!mounted) {
    return (
      <Button variant="outline" size="icon">
        <Sun className="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all" />
      </Button>
    )
  }

  return (
    <Button
      variant="outline"
      size="icon"
      onClick={() => setTheme(theme === "dark" ? "light" : "dark")}
      className="border-gray-700"
    >
      {theme === "dark" ? (
        <Sun className="h-[1.2rem] w-[1.2rem] text-yellow-400" />
      ) : (
        <Moon className="h-[1.2rem] w-[1.2rem] text-purple-500" />
      )}
      <span className="sr-only">Toggle theme</span>
    </Button>
  )
}




===== components/video-summary-card.jsx =====
"use client"

import React, { useState } from "react"
import Skeleton from 'react-loading-skeleton'
import 'react-loading-skeleton/dist/skeleton.css'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Button } from "@/components/ui/button"
import { VideoPlayer } from "@/components/video-player"
import { ThreeDCard } from "@/components/ui/3d-card"
import { GradientBorder } from "@/components/ui/gradient-border"
import { FlashCards } from "@/components/flash-cards"
import { Copy, Download, Share2, ExternalLink } from "lucide-react"
import { AISummaryRenderer } from "@/components/ai-summary-renderer"

export function VideoSummaryCard({ videoData, isLoading = false }) {
  const [copied, setCopied] = useState(null)
  const [isTypingEffect, setIsTypingEffect] = useState(true)

  const copyToClipboard = (text, type) => {
    navigator.clipboard.writeText(text)
    setCopied(type)
    setTimeout(() => setCopied(null), 2000)
  }

  const generateFlashCards = () => {
    if (!videoData?.transcript_with_time) return []

    const cards = []
    const transcript = videoData.transcript_with_time
    const totalLength = convertToSeconds(videoData.video_length)
    const sectionInterval = 60
    let currentTime = 0

    while (currentTime < totalLength) {
      const relevant = transcript.filter(
        (entry) => entry.start >= currentTime && entry.start < currentTime + sectionInterval
      )
      if (relevant.length > 0) {
        const title = relevant[0].text.length > 30
          ? relevant[0].text.substring(0, 30) + "..."
          : relevant[0].text
        const content = relevant.map((e) => e.text).join(" ")
        const minutes = Math.floor(currentTime / 60)
        const seconds = Math.floor(currentTime % 60)
        const timestamp = `${String(minutes).padStart(2, "0")}:${String(seconds).padStart(2, "0")}`
        cards.push({
          id: String(currentTime),
          title,
          timestamp,
          content,
        })
      }
      currentTime += sectionInterval
    }

    return cards.length > 0 ? cards : []
  }

  const convertToSeconds = (length) => {
    if (typeof length === "string" && length.includes(":")) {
      const [m, s] = length.split(":")
      return parseInt(m, 10) * 60 + parseInt(s, 10)
    }
    if (typeof length === "number") return length
    return 0
  }

  const formatVideoLength = (length) => {
    if (typeof length === "string" && length.includes(":")) return length
    const seconds = typeof length === "number" ? length : Number.parseInt(length)
    const minutes = Math.floor(seconds / 60)
    const remaining = seconds % 60
    return `${minutes}:${String(remaining).padStart(2, "0")}`
  }

  const formatPublicationDate = (dateString) => {
    if (!dateString) return ""
    try {
      const date = new Date(dateString)
      return date.toLocaleDateString("en-US", {
        year: "numeric",
        month: "long",
        day: "numeric",
      })
    } catch (e) {
      return dateString
    }
  }

  // إذا كان isLoading غير فعال، وكان videoData غير موجود، ارجع null
  if (!isLoading && !videoData) return null

  const getAISummary = () => {
    if (!videoData) return ""
    
    if (typeof videoData.summarize_ai === "string") {
      return videoData.summarize_ai
    } else if (typeof videoData.ai_summary_clean === "string") {
      return videoData.ai_summary_clean
    } else if (typeof videoData.ai_summary_clean === "object" && videoData.ai_summary_clean?.summarize_ai) {
      return videoData.ai_summary_clean.summarize_ai
    } else if (typeof videoData.ai_summary_with_time === "object" && videoData.ai_summary_with_time?.summarize_ai) {
      return videoData.ai_summary_with_time.summarize_ai
    } else {
      return "No summary found. Possibly the AI hasn't generated one."
    }
  }

  const aiSummary = getAISummary()

  return (
    <ThreeDCard>
      <Card className="border-0 bg-white/90 backdrop-blur-sm shadow-xl overflow-hidden rounded-3xl h-full w-full">
        <CardHeader className="pb-4 border-b border-gray-50">
          <div className="flex flex-col sm:flex-row sm:items-center gap-3 mb-3">
            <CardTitle className="text-2xl sm:text-3xl font-light tracking-tight">
              {isLoading ? <Skeleton width={300} /> : videoData?.video_title}
            </CardTitle>
          </div>
          <CardDescription className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-2">
            <span className="text-gray-700 text-lg">
              {isLoading ? <Skeleton width={150} /> : videoData?.creator_channel}
            </span>
            <span className="text-gray-500 text-sm bg-white border border-gray-50 px-4 py-1 rounded-full">
              {isLoading ? (
                <Skeleton width={120} />
              ) : (
                `${formatPublicationDate(videoData.publication_date)} • ${formatVideoLength(videoData.video_length)}`
              )}
            </span>
          </CardDescription>
        </CardHeader>

        <div className="px-6 py-8">
          {isLoading ? <Skeleton height={200} /> : <VideoPlayer videoId={videoData.video_id} />}
        </div>

        <CardContent className="pt-2">
          <Tabs defaultValue="summary" className="w-full">
            <TabsList className="w-full mb-8 bg-white border border-gray-50 p-1 rounded-full">
              <TabsTrigger value="summary" className="w-full data-[state=active]:bg-black data-[state=active]:text-white rounded-full py-3 transition-all duration-300">
                Summary
              </TabsTrigger>
              <TabsTrigger value="transcript" className="w-full data-[state=active]:bg-black data-[state=active]:text-white rounded-full py-3 transition-all duration-300">
                Full Text
              </TabsTrigger>
              <TabsTrigger value="flashcards" className="w-full data-[state=active]:bg-black data-[state=active]:text-white rounded-full py-3 transition-all duration-300">
                Flash Cards
              </TabsTrigger>
              <TabsTrigger value="info" className="w-full data-[state=active]:bg-black data-[state=active]:text-white rounded-full py-3 transition-all duration-300">
                Information
              </TabsTrigger>
            </TabsList>

            {/* Summary Tab Content */}
            <TabsContent value="summary" className="animate-in fade-in-50 duration-500">
              <div className="space-y-8">
                <div className="rounded-3xl bg-white border border-gray-50 p-10 relative overflow-hidden shadow-sm">
                  <div className="absolute top-0 left-0 w-full h-1 bg-gradient-to-r from-gray-900 to-gray-700"></div>
                  <div className="relative">
                    <div className="flex items-center justify-between mb-8">
                      <h3 className="text-2xl font-light tracking-tight">Video Summary</h3>
                      <Button 
                        variant="ghost" 
                        size="sm" 
                        onClick={() => setIsTypingEffect(!isTypingEffect)}
                        className="text-xs text-gray-500 hover:text-gray-700"
                      >
                        {isTypingEffect ? "إيقاف تأثير الكتابة" : "تشغيل تأثير الكتابة"}
                      </Button>
                    </div>
                    <div className="text-gray-700 leading-relaxed text-lg font-extralight">
                      {isLoading ? (
                        <Skeleton count={6} height={20} />
                      ) : (
                        <AISummaryRenderer markdown={aiSummary} typingEffect={isTypingEffect} />
                      )}
                    </div>
                  </div>
                </div>
                {!isLoading && (
                  <div className="flex flex-wrap gap-4 justify-end">
                    <GradientBorder>
                      <Button
                        variant="outline"
                        size="lg"
                        className="border-0 bg-white text-gray-700 hover:bg-gray-50 hover:text-black rounded-full group"
                        onClick={() => copyToClipboard(aiSummary, "summary")}
                      >
                        {copied === "summary" ? (
                          "Copied!"
                        ) : (
                          <>
                            <Copy className="mr-2 h-4 w-4 transition-transform group-hover:scale-110" />
                            Copy Summary
                          </>
                        )}
                      </Button>
                    </GradientBorder>

                    <GradientBorder>
                      <Button
                        variant="outline"
                        size="lg"
                        className="border-0 bg-white text-gray-700 hover:bg-gray-50 hover:text-black rounded-full group"
                      >
                        <Download className="mr-2 h-4 w-4 transition-transform group-hover:scale-110" />
                        Download as File
                      </Button>
                    </GradientBorder>

                    <Button size="lg" className="bg-black hover:bg-gray-800 rounded-full group">
                      <Share2 className="mr-2 h-4 w-4 transition-transform group-hover:scale-110" />
                      Share
                    </Button>
                  </div>
                )}
              </div>
            </TabsContent>

            {/* Transcript Tab Content */}
            <TabsContent value="transcript" className="animate-in fade-in-50 duration-500">
              <div className="space-y-8">
                <div className="max-h-[400px] overflow-y-auto rounded-3xl bg-white border border-gray-50 p-10 relative custom-scrollbar shadow-sm">
                  <div className="absolute top-0 left-0 w-full h-1 bg-gradient-to-r from-gray-900 to-gray-700"></div>
                  <div className="relative">
                    {isLoading ? (
                      <Skeleton count={10} height={20} />
                    ) : (
                      <p className="text-gray-700 whitespace-pre-line leading-relaxed text-justify font-extralight">
                        {videoData.transcript_clean || "Transcript not available for this video."}
                      </p>
                    )}
                  </div>
                </div>
                {!isLoading && (
                  <div className="flex flex-wrap gap-4 justify-end">
                    <GradientBorder>
                      <Button
                        variant="outline"
                        size="lg"
                        className="border-0 bg-white text-gray-700 hover:bg-gray-50 hover:text-black rounded-full group"
                        onClick={() =>
                          copyToClipboard(videoData.transcript_clean || "Transcript not available", "transcript")
                        }
                      >
                        {copied === "transcript" ? (
                          "Copied!"
                        ) : (
                          <>
                            <Copy className="mr-2 h-4 w-4 transition-transform group-hover:scale-110" />
                            Copy Text
                          </>
                        )}
                      </Button>
                    </GradientBorder>

                    <GradientBorder>
                      <Button
                        variant="outline"
                        size="lg"
                        className="border-0 bg-white text-gray-700 hover:bg-gray-50 hover:text-black rounded-full group"
                      >
                        <Download className="mr-2 h-4 w-4 transition-transform group-hover:scale-110" />
                        Download as File
                      </Button>
                    </GradientBorder>
                  </div>
                )}
              </div>
            </TabsContent>

            {/* Flash Cards Tab Content */}
            <TabsContent value="flashcards" className="animate-in fade-in-50 duration-500">
              <div className="space-y-8">
                <div className="rounded-3xl bg-white border border-gray-50 p-6 relative overflow-hidden shadow-sm min-h-[500px]">
                  <div className="absolute top-0 left-0 w-full h-1 bg-gradient-to-r from-gray-900 to-gray-700"></div>
                  <div className="relative h-full">
                    {isLoading ? (
                      <Skeleton count={5} height={80} className="mb-4" />
                    ) : (
                      <FlashCards cards={generateFlashCards()} />
                    )}
                  </div>
                </div>
              </div>
            </TabsContent>

            {/* Info Tab Content */}
            <TabsContent value="info" className="animate-in fade-in-50 duration-500">
              <div className="space-y-8">
                <div className="rounded-3xl bg-white border border-gray-50 p-10 relative shadow-sm">
                  <div className="absolute top-0 left-0 w-full h-1 bg-gradient-to-r from-gray-900 to-gray-700"></div>
                  <div className="relative">
                    <div className="flex items-center mb-8">
                      <h3 className="text-2xl font-light tracking-tight">Video Information</h3>
                    </div>
                    {isLoading ? (
                      <Skeleton count={7} height={30} className="mb-4" />
                    ) : (
                      <ul className="space-y-6 text-gray-700">
                        <li className="flex justify-between border-b border-gray-50 pb-4">
                          <span className="text-gray-500 font-light">Video ID:</span>
                          <span dir="ltr" className="font-mono bg-white border border-gray-50 px-4 py-1 rounded-full">
                            {videoData.video_id}
                          </span>
                        </li>
                        <li className="flex justify-between border-b border-gray-50 pb-4">
                          <span className="text-gray-500 font-light">Channel:</span>
                          <span className="font-light">{videoData.creator_channel}</span>
                        </li>
                        <li className="flex justify-between border-b border-gray-50 pb-4">
                          <span className="text-gray-500 font-light">Publication Date:</span>
                          <span className="font-light">{formatPublicationDate(videoData.publication_date)}</span>
                        </li>
                        <li className="flex justify-between border-b border-gray-50 pb-4">
                          <span className="text-gray-500 font-light">Duration:</span>
                          <span className="font-light">{formatVideoLength(videoData.video_length)}</span>
                        </li>
                        {videoData.words && (
                          <li className="flex justify-between border-b border-gray-50 pb-4">
                            <span className="text-gray-500 font-light">Word Count:</span>
                            <span className="font-light">{videoData.words} words</span>
                          </li>
                        )}
                        <li>
                          <span className="text-gray-500 block mb-3 font-light">Description:</span>
                          <p className="mt-1 text-sm bg-white border border-gray-50 p-6 rounded-2xl font-extralight leading-relaxed">
                            {videoData.description}
                          </p>
                        </li>
                      </ul>
                    )}
                  </div>
                </div>
                {!isLoading && (
                  <div className="flex justify-end">
                    <Button
                      size="lg"
                      className="bg-black hover:bg-gray-800 rounded-full group"
                      onClick={() =>
                        window.open(`https://www.youtube.com/watch?v=${videoData.video_id}`, "_blank")
                      }
                    >
                      <ExternalLink className="mr-2 h-4 w-4 transition-transform group-hover:scale-110" />
                      Open in YouTube
                    </Button>
                  </div>
                )}
              </div>
            </TabsContent>
          </Tabs>
        </CardContent>
      </Card>
    </ThreeDCard>
  )
}


===== components/video-player.jsx =====
"use client"

import React, { useState, useRef, useEffect } from "react"
import { Play, Pause, Volume2, VolumeX, Maximize, Minimize } from "lucide-react"
import { cn } from "@/lib/utils"

/**
 * مكوّن يعرض فيديو YouTube (أو Mock) مع عناصر تحكم
 * @param {Object} props
 * @param {string} props.videoId - معرف الفيديو على يوتيوب
 */
export function VideoPlayer({ videoId }) {
  const [showControls, setShowControls] = useState(false)
  const [isPlaying, setIsPlaying] = useState(false)
  const [isMuted, setIsMuted] = useState(false)
  const [isFullscreen, setIsFullscreen] = useState(false)
  const [progress, setProgress] = useState(0)
  const [currentTime, setCurrentTime] = useState("0:00")
  const [duration, setDuration] = useState("0:00")

  const playerRef = useRef(null)
  const iframeRef = useRef(null)

  const toggleFullscreen = () => {
    if (!document.fullscreenElement) {
      playerRef.current?.requestFullscreen().then(() => {
        setIsFullscreen(true)
      })
    } else {
      document.exitFullscreen().then(() => {
        setIsFullscreen(false)
      })
    }
  }

  const formatTime = (seconds) => {
    const mins = Math.floor(seconds / 60)
    const secs = Math.floor(seconds % 60)
    return `${mins}:${secs < 10 ? "0" : ""}${secs}`
  }

  const togglePlay = () => {
    setIsPlaying(!isPlaying)
    // من المفترض هنا أن تتحكم بـ (player.playVideo / player.pauseVideo) لو كنت تستعمل YouTube API
  }

  const toggleMute = () => {
    setIsMuted(!isMuted)
    // من المفترض استدعاء (player.mute / player.unMute) لو كنت تستخدم YouTube API
  }

  // محاكاة التقدم / المؤشر الزمني
  useEffect(() => {
    let interval
    if (isPlaying) {
      interval = setInterval(() => {
        setProgress((prev) => {
          const newProgress = Math.min(prev + 0.5, 100)
          const timeInSeconds = (newProgress / 100) * 345 // مثال: نفترض طول الفيديو 5:45 (345 ث)
          setCurrentTime(formatTime(timeInSeconds))
          return newProgress
        })
      }, 500)
    }
    return () => clearInterval(interval)
  }, [isPlaying])

  // ضبط مدة الفيديو (Mock)
  useEffect(() => {
    setDuration("5:45")
  }, [])

  return (
    <div
      ref={playerRef}
      className="relative w-full rounded-3xl overflow-hidden border border-gray-100 shadow-lg bg-black group"
      onMouseEnter={() => setShowControls(true)}
      onMouseLeave={() => setShowControls(false)}
    >
      {/* iframe YouTube/mock */}
      <div className="relative w-full pt-[56.25%]">
        <iframe
          ref={iframeRef}
          src={`https://www.youtube.com/embed/${videoId}?enablejsapi=1&controls=0&showinfo=0&rel=0&modestbranding=1`}
          className="absolute top-0 left-0 w-full h-full border-0"
          title="YouTube video player"
          allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
          allowFullScreen
        />

        {/* Controls Overlay */}
        <div
          className={cn(
            "absolute inset-0 bg-gradient-to-t from-black/80 via-transparent to-black/30 transition-opacity duration-500",
            showControls || !isPlaying ? "opacity-100" : "opacity-0"
          )}
        >
          {/* Top Title Bar */}
          <div className="absolute top-0 left-0 right-0 p-6">
            <h3 className="text-white text-xl font-light tracking-wide truncate">
              Mock Video Title
            </h3>
          </div>

          {/* Center Play Button */}
          <button
            onClick={togglePlay}
            className={cn(
              "absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 h-20 w-20 flex items-center justify-center rounded-full bg-white/10 backdrop-blur-md transition-transform duration-500 hover:scale-110",
              isPlaying ? "opacity-0 group-hover:opacity-100" : "opacity-100"
            )}
          >
            {isPlaying ? (
              <Pause className="h-10 w-10 text-white" />
            ) : (
              <Play className="h-10 w-10 text-white" />
            )}
          </button>

          {/* Bottom Control Bar */}
          <div className="absolute bottom-0 left-0 right-0 p-6 flex flex-col gap-3">
            {/* Progress Bar */}
            <div className="w-full h-1 bg-white/30 rounded-full overflow-hidden cursor-pointer">
              <div
                className="h-full bg-gradient-to-r from-gray-300 to-white rounded-full"
                style={{ width: `${progress}%` }}
              ></div>
            </div>

            {/* Controls Row */}
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-6">
                <button
                  onClick={togglePlay}
                  className="h-10 w-10 flex items-center justify-center rounded-full bg-white/10 hover:bg-white/20 transition-colors duration-300"
                >
                  {isPlaying ? <Pause className="h-5 w-5 text-white" /> : <Play className="h-5 w-5 text-white" />}
                </button>
                <button
                  onClick={toggleMute}
                  className="h-10 w-10 flex items-center justify-center rounded-full bg-white/10 hover:bg-white/20 transition-colors duration-300"
                >
                  {isMuted ? <VolumeX className="h-5 w-5 text-white" /> : <Volume2 className="h-5 w-5 text-white" />}
                </button>
                <div className="text-white text-sm font-light">
                  <span>{currentTime}</span>
                  <span className="mx-1">/</span>
                  <span>{duration}</span>
                </div>
              </div>

              <button
                onClick={toggleFullscreen}
                className="h-10 w-10 flex items-center justify-center rounded-full bg-white/10 hover:bg-white/20 transition-colors duration-300"
              >
                {isFullscreen ? (
                  <Minimize className="h-5 w-5 text-white" />
                ) : (
                  <Maximize className="h-5 w-5 text-white" />
                )}
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}



===== components/theme-provider.jsx =====
"use client"

import React from "react"
import { ThemeProvider as NextThemesProvider } from "next-themes"

export function ThemeProvider({ children, ...props }) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>
}



===== components/ai-summary-renderer.jsx =====
// components/ai-summary-renderer.jsx

import React, { useState, useEffect } from 'react';
import { EnhancedTypingEffect } from './ui/typing-effect';

// مكون لعرض نص الذكاء الاصطناعي بتنسيق مناسب وتأثير الكتابة
export function AISummaryRenderer({ markdown, typingEffect = true }) {
  const [displayedText, setDisplayedText] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const [parsedContent, setParsedContent] = useState([]);
  
  // تقسيم النص إلى فقرات وقوائم وعناوين
  useEffect(() => {
    if (!markdown) return;
    
    // معالجة المحتوى لتحويله من Markdown إلى عناصر منظمة
    const lines = markdown.split('\n').filter(line => line.trim() !== '');
    const content = [];
    let listItems = [];
    let listType = null;

    lines.forEach((line, i) => {
      // التعامل مع العناوين
      if (line.startsWith('# ')) {
        if (listItems.length > 0) {
          content.push({ type: listType, items: [...listItems] });
          listItems = [];
          listType = null;
        }
        content.push({ type: 'h1', content: line.substring(2) });
      } 
      else if (line.startsWith('## ')) {
        if (listItems.length > 0) {
          content.push({ type: listType, items: [...listItems] });
          listItems = [];
          listType = null;
        }
        content.push({ type: 'h2', content: line.substring(3) });
      } 
      else if (line.startsWith('### ')) {
        if (listItems.length > 0) {
          content.push({ type: listType, items: [...listItems] });
          listItems = [];
          listType = null;
        }
        content.push({ type: 'h3', content: line.substring(4) });
      } 
      // التعامل مع القوائم المرقمة
      else if (/^\d+\.\s/.test(line)) {
        if (listType && listType !== 'ol') {
          content.push({ type: listType, items: [...listItems] });
          listItems = [];
        }
        listType = 'ol';
        listItems.push(line.replace(/^\d+\.\s/, ''));
      } 
      // التعامل مع القوائم النقطية
      else if (line.startsWith('- ') || line.startsWith('* ')) {
        if (listType && listType !== 'ul') {
          content.push({ type: listType, items: [...listItems] });
          listItems = [];
        }
        listType = 'ul';
        listItems.push(line.substring(2));
      } 
      // التعامل مع الفقرات العادية
      else {
        if (listItems.length > 0) {
          content.push({ type: listType, items: [...listItems] });
          listItems = [];
          listType = null;
        }
        content.push({ type: 'p', content: line });
      }
      
      // إضافة القائمة المتبقية في النهاية
      if (i === lines.length - 1 && listItems.length > 0) {
        content.push({ type: listType, items: [...listItems] });
      }
    });
    
    setParsedContent(content);
  }, [markdown]);

  // تأثير الكتابة المتدرجة
  useEffect(() => {
    if (!markdown || !typingEffect) {
      setDisplayedText(markdown || '');
      return;
    }

    setIsTyping(true);
    let currentText = '';
    let currentIndex = 0;
    
    const interval = setInterval(() => {
      if (currentIndex < markdown.length) {
        currentText += markdown[currentIndex];
        setDisplayedText(currentText);
        currentIndex++;
      } else {
        clearInterval(interval);
        setIsTyping(false);
      }
    }, 10); // سرعة الكتابة
    
    return () => clearInterval(interval);
  }, [markdown, typingEffect]);

  // تحويل النص العادي مع تنسيقات Markdown البسيطة
  const formatText = (text) => {
    if (!text) return '';
    
    // معالجة الروابط [نص](رابط)
    let formattedText = text.replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2" target="_blank" class="text-blue-600 hover:underline">$1</a>');
    
    // معالجة النص العريض **نص**
    formattedText = formattedText.replace(/\*\*([^*]+)\*\*/g, '<strong class="font-semibold">$1</strong>');
    
    // معالجة النص المائل *نص*
    formattedText = formattedText.replace(/\*([^*]+)\*/g, '<em class="italic">$1</em>');
    
    // معالجة الكود `نص`
    formattedText = formattedText.replace(/`([^`]+)`/g, '<code class="bg-gray-100 px-1 py-0.5 rounded text-sm font-mono">$1</code>');
    
    return formattedText;
  };

  // تقديم المحتوى المنسق
  const renderContent = () => {
    if (typingEffect && isTyping) {
      return <div dangerouslySetInnerHTML={{ __html: formatText(displayedText) }} />;
    }
    
    return (
      <>
        {parsedContent.map((item, index) => {
          switch (item.type) {
            case 'h1':
              return <h1 key={index} className="text-3xl font-semibold my-4" dangerouslySetInnerHTML={{ __html: formatText(item.content) }} />;
            case 'h2':
              return <h2 key={index} className="text-2xl font-semibold my-3" dangerouslySetInnerHTML={{ __html: formatText(item.content) }} />;
            case 'h3':
              return <h3 key={index} className="text-xl font-semibold my-2" dangerouslySetInnerHTML={{ __html: formatText(item.content) }} />;
            case 'p':
              return <p key={index} className="my-2 leading-relaxed" dangerouslySetInnerHTML={{ __html: formatText(item.content) }} />;
            case 'ul':
              return (
                <ul key={index} className="list-disc pl-6 my-2 space-y-1">
                  {item.items.map((li, i) => (
                    <li key={i} className="leading-relaxed" dangerouslySetInnerHTML={{ __html: formatText(li) }} />
                  ))}
                </ul>
              );
            case 'ol':
              return (
                <ol key={index} className="list-decimal pl-6 my-2 space-y-1">
                  {item.items.map((li, i) => (
                    <li key={i} className="leading-relaxed" dangerouslySetInnerHTML={{ __html: formatText(li) }} />
                  ))}
                </ol>
              );
            default:
              return null;
          }
        })}
      </>
    );
  };

  // مكون متقدم يستخدم المكون EnhancedTypingEffect للتنسيق
  const renderWithEnhancedTyping = () => {
    if (!typingEffect) {
      return renderContent();
    }
    
    return (
      <div className="ai-summary-renderer">
        {parsedContent.map((item, index) => {
          switch (item.type) {
            case 'h1':
              return (
                <h1 key={index} className="text-3xl font-semibold my-4">
                  <EnhancedTypingEffect 
                    text={item.content} 
                    speed={20} 
                    delay={index * 100}
                  />
                </h1>
              );
            case 'h2':
              return (
                <h2 key={index} className="text-2xl font-semibold my-3">
                  <EnhancedTypingEffect 
                    text={item.content} 
                    speed={25} 
                    delay={index * 100}
                  />
                </h2>
              );
            case 'h3':
              return (
                <h3 key={index} className="text-xl font-semibold my-2">
                  <EnhancedTypingEffect 
                    text={item.content} 
                    speed={25} 
                    delay={index * 100}
                  />
                </h3>
              );
            case 'p':
              return (
                <p key={index} className="my-2 leading-relaxed">
                  <EnhancedTypingEffect 
                    text={item.content} 
                    speed={10} 
                    delay={index * 100}
                  />
                </p>
              );
            case 'ul':
              return (
                <ul key={index} className="list-disc pl-6 my-2 space-y-1">
                  {item.items.map((li, i) => (
                    <li key={i} className="leading-relaxed">
                      <EnhancedTypingEffect 
                        text={li} 
                        speed={10} 
                        delay={(index * 300) + (i * 200)}
                      />
                    </li>
                  ))}
                </ul>
              );
            case 'ol':
              return (
                <ol key={index} className="list-decimal pl-6 my-2 space-y-1">
                  {item.items.map((li, i) => (
                    <li key={i} className="leading-relaxed">
                      <EnhancedTypingEffect 
                        text={li} 
                        speed={10} 
                        delay={(index * 300) + (i * 200)}
                      />
                    </li>
                  ))}
                </ol>
              );
            default:
              return null;
          }
        })}
      </div>
    );
  };

  return (
    <div className="ai-summary-renderer">
      {/* يمكن اختيار طريقة العرض بناءً على ما إذا كان تأثير الكتابة المحسن متاحًا */}
      {renderContent()}
      {typingEffect && isTyping && (
        <span className="inline-block h-5 w-2 bg-black ml-1 animate-pulse"></span>
      )}
    </div>
  );
}

// نسخة مبسطة من المكون، تركز على تنسيق وعرض Markdown فقط، بدون تأثير الكتابة
export function MarkdownRenderer({ markdown, className = "" }) {
  const [parsedContent, setParsedContent] = useState([]);
  
  useEffect(() => {
    if (!markdown) return;
    
    // نفس منطق التحليل من المكون السابق
    const lines = markdown.split('\n').filter(line => line.trim() !== '');
    const content = [];
    let listItems = [];
    let listType = null;

    lines.forEach((line, i) => {
      if (line.startsWith('# ')) {
        if (listItems.length > 0) {
          content.push({ type: listType, items: [...listItems] });
          listItems = [];
          listType = null;
        }
        content.push({ type: 'h1', content: line.substring(2) });
      } 
      else if (line.startsWith('## ')) {
        if (listItems.length > 0) {
          content.push({ type: listType, items: [...listItems] });
          listItems = [];
          listType = null;
        }
        content.push({ type: 'h2', content: line.substring(3) });
      } 
      else if (line.startsWith('### ')) {
        if (listItems.length > 0) {
          content.push({ type: listType, items: [...listItems] });
          listItems = [];
          listType = null;
        }
        content.push({ type: 'h3', content: line.substring(4) });
      } 
      else if (/^\d+\.\s/.test(line)) {
        if (listType && listType !== 'ol') {
          content.push({ type: listType, items: [...listItems] });
          listItems = [];
        }
        listType = 'ol';
        listItems.push(line.replace(/^\d+\.\s/, ''));
      } 
      else if (line.startsWith('- ') || line.startsWith('* ')) {
        if (listType && listType !== 'ul') {
          content.push({ type: listType, items: [...listItems] });
          listItems = [];
        }
        listType = 'ul';
        listItems.push(line.substring(2));
      } 
      else {
        if (listItems.length > 0) {
          content.push({ type: listType, items: [...listItems] });
          listItems = [];
          listType = null;
        }
        content.push({ type: 'p', content: line });
      }
      
      if (i === lines.length - 1 && listItems.length > 0) {
        content.push({ type: listType, items: [...listItems] });
      }
    });
    
    setParsedContent(content);
  }, [markdown]);

  // نفس دالة formatText من المكون السابق
  const formatText = (text) => {
    if (!text) return '';
    
    let formattedText = text.replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2" target="_blank" class="text-blue-600 hover:underline">$1</a>');
    
    formattedText = formattedText.replace(/\*\*([^*]+)\*\*/g, '<strong class="font-semibold">$1</strong>');
    
    formattedText = formattedText.replace(/\*([^*]+)\*/g, '<em class="italic">$1</em>');
    
    formattedText = formattedText.replace(/`([^`]+)`/g, '<code class="bg-gray-100 px-1 py-0.5 rounded text-sm font-mono">$1</code>');
    
    return formattedText;
  };

  return (
    <div className={`markdown-renderer ${className}`}>
      {parsedContent.map((item, index) => {
        switch (item.type) {
          case 'h1':
            return <h1 key={index} className="text-3xl font-semibold my-4" dangerouslySetInnerHTML={{ __html: formatText(item.content) }} />;
          case 'h2':
            return <h2 key={index} className="text-2xl font-semibold my-3" dangerouslySetInnerHTML={{ __html: formatText(item.content) }} />;
          case 'h3':
            return <h3 key={index} className="text-xl font-semibold my-2" dangerouslySetInnerHTML={{ __html: formatText(item.content) }} />;
          case 'p':
            return <p key={index} className="my-2 leading-relaxed" dangerouslySetInnerHTML={{ __html: formatText(item.content) }} />;
          case 'ul':
            return (
              <ul key={index} className="list-disc pl-6 my-2 space-y-1">
                {item.items.map((li, i) => (
                  <li key={i} className="leading-relaxed" dangerouslySetInnerHTML={{ __html: formatText(li) }} />
                ))}
              </ul>
            );
          case 'ol':
            return (
              <ol key={index} className="list-decimal pl-6 my-2 space-y-1">
                {item.items.map((li, i) => (
                  <li key={i} className="leading-relaxed" dangerouslySetInnerHTML={{ __html: formatText(li) }} />
                ))}
              </ol>
            );
          default:
            return null;
        }
      })}
    </div>
  );
}

export default AISummaryRenderer;


===== components/flash-cards.jsx =====
"use client"
import { useState, useRef } from "react"
import { motion, AnimatePresence } from "framer-motion"
import { ChevronLeft, ChevronRight } from "lucide-react"
import { Button } from "@/components/ui/button"

export function FlashCards({ cards }) {
  const [currentIndex, setCurrentIndex] = useState(0)
  const [direction, setDirection] = useState(null)
  const [recentlyRemoved, setRecentlyRemoved] = useState([])
  const constraintsRef = useRef(null)

  if (!cards) return null

  const removeCard = (dir) => {
    if (currentIndex >= cards.length) return
    setRecentlyRemoved([...recentlyRemoved, { card: cards[currentIndex], direction: dir }])
    setDirection(dir)
    setCurrentIndex((prev) => prev + 1)
    setTimeout(() => {
      setDirection(null)
    }, 300)
  }

  const undoRemove = () => {
    if (recentlyRemoved.length === 0) return
    const lastRemoved = recentlyRemoved[recentlyRemoved.length - 1]
    setRecentlyRemoved(recentlyRemoved.slice(0, -1))
    setCurrentIndex((prev) => prev - 1)
  }

  // handleDragEnd بدلاً من استعمال PanInfo, نستقبل info كمعلومة عادية
  const handleDragEnd = (_e, info) => {
    if (Math.abs(info.offset.x) > 100) {
      if (info.offset.x > 0) {
        removeCard("right")
      } else {
        removeCard("left")
      }
    }
  }

  const variants = {
    enter: (dir) => ({
      x: dir === "right" ? -300 : dir === "left" ? 300 : 0,
      opacity: 0,
      scale: 0.8,
    }),
    center: {
      x: 0,
      opacity: 1,
      scale: 1,
      transition: { duration: 0.3 },
    },
    exit: (dir) => ({
      x: dir === "left" ? -300 : dir === "right" ? 300 : 0,
      opacity: 0,
      scale: 0.8,
      transition: { duration: 0.3 },
    }),
  }

  return (
    <div className="w-full h-full flex flex-col items-center justify-center">
      <div className="relative w-full max-w-md h-[400px] mx-auto" ref={constraintsRef}>
        <AnimatePresence initial={false} custom={direction}>
          {currentIndex < cards.length ? (
            <motion.div
              key={cards[currentIndex].id}
              custom={direction}
              variants={variants}
              initial="enter"
              animate="center"
              exit="exit"
              drag="x"
              dragConstraints={{ left: 0, right: 0 }}
              dragElastic={0.7}
              onDragEnd={handleDragEnd}
              className="absolute inset-0 w-full h-full cursor-grab active:cursor-grabbing"
            >
              <div className="w-full h-full bg-white rounded-3xl shadow-lg border border-gray-100 p-8 flex flex-col">
                <div className="mb-4 pb-4 border-b border-gray-100">
                  <span className="text-sm font-medium text-gray-500">{cards[currentIndex].timestamp}</span>
                  <h3 className="text-2xl font-medium mt-2">{cards[currentIndex].title}</h3>
                </div>
                <div className="flex-grow overflow-auto custom-scrollbar">
                  <p className="text-gray-600 font-light leading-relaxed">{cards[currentIndex].content}</p>
                </div>
                <div className="mt-6 text-center text-sm text-gray-400">Swipe left or right to navigate</div>
              </div>
            </motion.div>
          ) : (
            <div className="absolute inset-0 w-full h-full flex items-center justify-center">
              <div className="text-center">
                <h3 className="text-2xl font-light mb-4">No more cards</h3>
                {recentlyRemoved.length > 0 && (
                  <Button onClick={undoRemove} variant="outline" className="rounded-full border-gray-200">
                    Undo Last Card
                  </Button>
                )}
              </div>
            </div>
          )}
        </AnimatePresence>
      </div>

      <div className="flex justify-center mt-8 gap-4">
        <Button
          onClick={() => removeCard("left")}
          disabled={currentIndex >= cards.length}
          variant="outline"
          size="icon"
          className="rounded-full h-12 w-12 border-gray-200"
        >
          <ChevronLeft className="h-5 w-5" />
        </Button>
        {recentlyRemoved.length > 0 && (
          <Button onClick={undoRemove} variant="outline" className="rounded-full border-gray-200">
            Undo ({recentlyRemoved.length})
          </Button>
        )}
        <Button
          onClick={() => removeCard("right")}
          disabled={currentIndex >= cards.length}
          variant="outline"
          size="icon"
          className="rounded-full h-12 w-12 border-gray-200"
        >
          <ChevronRight className="h-5 w-5" />
        </Button>
      </div>

      <div className="mt-4 text-center">
        <span className="text-sm text-gray-500">
          {currentIndex} / {cards.length} cards viewed
        </span>
      </div>
    </div>
  )
}



===== components/floating-nav.jsx =====
"use client"
import React, { useState } from "react"
import { motion, AnimatePresence, useScroll, useMotionValueEvent } from "framer-motion"
import { cn } from "@/lib/utils"

export const FloatingNav = ({ navItems, className }) => {
  const { scrollYProgress } = useScroll()
  const [visible, setVisible] = useState(false)

  useMotionValueEvent(scrollYProgress, "change", (latest) => {
    const prev = scrollYProgress.getPrevious()
    const direction = latest - prev
    if (scrollYProgress.get() < 0.05) {
      setVisible(false)
    } else {
      if (direction < 0) setVisible(true)
      else setVisible(false)
    }
  })

  return (
    <AnimatePresence mode="wait">
      {(
        <motion.div
          initial={{
            opacity: 1,
            y: -100,
          }}
          animate={{
            y: visible ? 0 : -100,
            opacity: visible ? 1 : 0,
          }}
          transition={{
            duration: 0.2,
          }}
          className={cn(
            "flex max-w-fit fixed top-4 sm:top-10 inset-x-0 mx-auto border border-gray-50 bg-white/90 backdrop-blur-md shadow-lg z-[5000] rounded-full p-2 items-center justify-center space-x-2 sm:space-x-4 overflow-x-auto",
            className
          )}
        >
          {navItems.map((navItem, idx) => (
            <a
              key={`link=${idx}`}
              href={navItem.link}
              className={cn(
                "relative px-5 py-2 text-gray-500 hover:text-black transition-colors duration-300 text-sm font-normal tracking-wider",
                "after:absolute after:bottom-0 after:left-0 after:right-0 after:h-[1px] after:bg-gray-800 after:origin-left after:scale-x-0 hover:after:scale-x-100 after:transition-transform after:duration-300"
              )}
            >
              <span>{navItem.name}</span>
            </a>
          ))}
        </motion.div>
      )}
    </AnimatePresence>
  )
}



===== components/hero-parallax.jsx =====
"use client"
import React, { useRef, useState } from "react"
import { motion, useScroll, useTransform, useSpring } from "framer-motion"
import Image from "next/image"
import Link from "next/link"

export const HeroParallax = ({ products }) => {
  // قسم المنتجات
  const firstRow = products.slice(0, 2)
  const secondRow = products.slice(2, 4)

  const ref = useRef(null)
  const { scrollYProgress } = useScroll({
    target: ref,
    offset: ["start start", "end start"],
  })

  const springConfig = { stiffness: 300, damping: 30, bounce: 100 }

  const translateX = useSpring(useTransform(scrollYProgress, [0, 1], [0, 1000]), springConfig)
  const translateXReverse = useSpring(useTransform(scrollYProgress, [0, 1], [0, -1000]), springConfig)
  const rotateX = useSpring(useTransform(scrollYProgress, [0, 0.2], [15, 0]), springConfig)
  const opacity = useSpring(useTransform(scrollYProgress, [0, 0.2], [0.2, 1]), springConfig)
  const rotateZ = useSpring(useTransform(scrollYProgress, [0, 0.2], [20, 0]), springConfig)
  const translateY = useSpring(useTransform(scrollYProgress, [0, 0.2], [-700, 0]), springConfig)

  return (
    <div
      ref={ref}
      className="h-[300vh] py-20 sm:py-40 overflow-hidden antialiased relative flex flex-col self-auto [perspective:1000px] [transform-style:preserve-3d]"
    >
      <Header />
      <motion.div
        style={{
          rotateX,
          rotateZ,
          translateY,
          opacity,
        }}
      >
        <motion.div className="flex flex-row-reverse space-x-reverse space-x-20 mb-20">
          {firstRow.map((product) => (
            <ProductCard key={product.title} product={product} translate={translateX} />
          ))}
        </motion.div>
        <motion.div className="flex flex-row mb-20 space-x-20 ">
          {secondRow.map((product) => (
            <ProductCard key={product.title} product={product} translate={translateXReverse} />
          ))}
        </motion.div>
      </motion.div>
    </div>
  )
}

export const Header = () => {
  return (
    <div className="max-w-7xl relative mx-auto py-10 sm:py-20 md:py-40 px-4 w-full left-0 top-0">
      <span className="px-3 py-1 rounded-full bg-black/5 border border-black/10 text-sm font-medium inline-block mb-4">
        Use Cases
      </span>
      <h2 className="text-4xl md:text-5xl font-bold mb-4 tracking-tight">
        Various Applications
        <br />
        <span className="text-3xl md:text-4xl text-gray-600">for Video Summarization</span>
      </h2>
      <p className="max-w-2xl text-base md:text-xl mt-8 text-gray-600 font-light">
        Discover how our platform can be used in different fields and applications to save time and extract important
        information
      </p>
    </div>
  )
}

export const ProductCard = ({ product, translate }) => {
  return (
    <motion.div
      style={{
        x: translate,
      }}
      whileHover={{
        y: -20,
      }}
      className="group/product h-96 w-[30rem] relative flex-shrink-0"
    >
      <Link href={product.link} className="block group-hover/product:shadow-2xl">
        <Image
          src={product.thumbnail || "/placeholder.svg"}
          height="600"
          width="800"
          className="object-cover object-left-top absolute h-full w-full inset-0 rounded-3xl"
          alt={product.title}
        />
      </Link>
      <div className="absolute inset-0 h-full w-full rounded-3xl bg-black opacity-40 group-hover/product:opacity-20 transition duration-300"></div>
      <div className="absolute bottom-4 left-4 right-4 bg-white/10 backdrop-blur-md p-4 rounded-xl border border-white/10">
        <h2 className="font-bold text-xl text-white">{product.title}</h2>
      </div>
    </motion.div>
  )
}



===== hooks/use-toast.ts =====
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }



===== hooks/use-mobile.jsx =====
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}



===== styles/globals.css =====
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  font-family: Arial, Helvetica, sans-serif;
}

@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
}

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 0% 3.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
    --sidebar-background: 0 0% 98%;
    --sidebar-foreground: 240 5.3% 26.1%;
    --sidebar-primary: 240 5.9% 10%;
    --sidebar-primary-foreground: 0 0% 98%;
    --sidebar-accent: 240 4.8% 95.9%;
    --sidebar-accent-foreground: 240 5.9% 10%;
    --sidebar-border: 220 13% 91%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 0 0% 9%;
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 0% 83.1%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
    --sidebar-background: 240 5.9% 10%;
    --sidebar-foreground: 240 4.8% 95.9%;
    --sidebar-primary: 224.3 76.3% 48%;
    --sidebar-primary-foreground: 0 0% 100%;
    --sidebar-accent: 240 3.7% 15.9%;
    --sidebar-accent-foreground: 240 4.8% 95.9%;
    --sidebar-border: 240 3.7% 15.9%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}